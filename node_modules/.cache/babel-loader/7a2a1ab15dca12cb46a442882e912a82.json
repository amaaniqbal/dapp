{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeZoneFile = makeZoneFile;\n\nvar _zoneFileTemplate = require(\"./zoneFileTemplate\");\n\nfunction makeZoneFile(jsonZoneFile, template = (0, _zoneFileTemplate.getZoneFileTemplate)()) {\n  template = processOrigin(jsonZoneFile['$origin'], template);\n  template = processTTL(jsonZoneFile['$ttl'], template);\n  template = processSOA(jsonZoneFile['soa'], template);\n  template = processNS(jsonZoneFile['ns'], template);\n  template = processA(jsonZoneFile['a'], template);\n  template = processAAAA(jsonZoneFile['aaaa'], template);\n  template = processCNAME(jsonZoneFile['cname'], template);\n  template = processMX(jsonZoneFile['mx'], template);\n  template = processPTR(jsonZoneFile['ptr'], template);\n  template = processTXT(jsonZoneFile['txt'], template);\n  template = processSRV(jsonZoneFile['srv'], template);\n  template = processSPF(jsonZoneFile['spf'], template);\n  template = processURI(jsonZoneFile['uri'], template);\n  template = processValues(jsonZoneFile, template);\n  return template.replace(/\\n{2,}/gim, '\\n\\n');\n}\n\n;\n\nfunction processOrigin(data, template) {\n  let ret = '';\n\n  if (typeof data !== 'undefined') {\n    ret += '$ORIGIN ' + data;\n  }\n\n  return template.replace('{$origin}', ret);\n}\n\n;\n\nfunction processTTL(data, template) {\n  let ret = '';\n\n  if (typeof data !== 'undefined') {\n    ret += '$TTL ' + data;\n  }\n\n  return template.replace('{$ttl}', ret);\n}\n\n;\n\nfunction processSOA(data, template) {\n  let ret = template;\n\n  if (typeof data !== 'undefined') {\n    data.name = data.name || '@';\n    data.ttl = data.ttl || '';\n\n    for (const key in data) {\n      const value = data[key];\n      ret = ret.replace('{' + key + '}', value + '\\t');\n    }\n  }\n\n  return ret;\n}\n\n;\n\nfunction processNS(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tNS\\t' + record.host + '\\n';\n    }\n  }\n\n  return template.replace('{ns}', ret);\n}\n\n;\n\nfunction processA(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tA\\t' + record.ip + '\\n';\n    }\n  }\n\n  return template.replace('{a}', ret);\n}\n\n;\n\nfunction processAAAA(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tAAAA\\t' + record.ip + '\\n';\n    }\n  }\n\n  return template.replace('{aaaa}', ret);\n}\n\n;\n\nfunction processCNAME(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tCNAME\\t' + record.alias + '\\n';\n    }\n  }\n\n  return template.replace('{cname}', ret);\n}\n\n;\n\nfunction processMX(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tMX\\t' + record.preference + '\\t' + record.host + '\\n';\n    }\n  }\n\n  return template.replace('{mx}', ret);\n}\n\n;\n\nfunction processPTR(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tPTR\\t' + record.host + '\\n';\n    }\n  }\n\n  return template.replace('{ptr}', ret);\n}\n\n;\n\nfunction processTXT(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tTXT\\t';\n      const txtData = record.txt;\n\n      if (typeof txtData === 'string') {\n        ret += '\"' + txtData + '\"';\n      } else if (txtData instanceof Array) {\n        ret += txtData.map(function (datum) {\n          return '\"' + datum + '\"';\n        }).join(' ');\n      }\n\n      ret += '\\n';\n    }\n  }\n\n  return template.replace('{txt}', ret);\n}\n\n;\n\nfunction processSRV(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tSRV\\t' + record.priority + '\\t';\n      ret += record.weight + '\\t';\n      ret += record.port + '\\t';\n      ret += record.target + '\\n';\n    }\n  }\n\n  return template.replace('{srv}', ret);\n}\n\n;\n\nfunction processSPF(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tSPF\\t' + record.data + '\\n';\n    }\n  }\n\n  return template.replace('{spf}', ret);\n}\n\n;\n\nfunction processURI(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tURI\\t' + record.priority + '\\t';\n      ret += record.weight + '\\t';\n      ret += '\"' + record.target + '\"\\n';\n    }\n  }\n\n  return template.replace('{uri}', ret);\n}\n\n;\n\nfunction processValues(jsonZoneFile, template) {\n  template = template.replace('{zone}', jsonZoneFile['$origin'] || (jsonZoneFile['soa'] ? jsonZoneFile['soa']['name'] : false) || '');\n  template = template.replace('{datetime}', new Date().toISOString());\n  const time = Math.round(Date.now() / 1000);\n  return template.replace('{time}', `${time}`);\n}\n\n;","map":{"version":3,"sources":["/home/os/Desktop/hello-world-tutorial/node_modules/zone-file/lib/makeZoneFile.js"],"names":["Object","defineProperty","exports","value","makeZoneFile","_zoneFileTemplate","require","jsonZoneFile","template","getZoneFileTemplate","processOrigin","processTTL","processSOA","processNS","processA","processAAAA","processCNAME","processMX","processPTR","processTXT","processSRV","processSPF","processURI","processValues","replace","data","ret","name","ttl","key","record","host","ip","alias","preference","txtData","txt","Array","map","datum","join","priority","weight","port","target","Date","toISOString","time","Math","round","now"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeZoneFile = makeZoneFile;\n\nvar _zoneFileTemplate = require(\"./zoneFileTemplate\");\n\nfunction makeZoneFile(jsonZoneFile, template = (0, _zoneFileTemplate.getZoneFileTemplate)()) {\n  template = processOrigin(jsonZoneFile['$origin'], template);\n  template = processTTL(jsonZoneFile['$ttl'], template);\n  template = processSOA(jsonZoneFile['soa'], template);\n  template = processNS(jsonZoneFile['ns'], template);\n  template = processA(jsonZoneFile['a'], template);\n  template = processAAAA(jsonZoneFile['aaaa'], template);\n  template = processCNAME(jsonZoneFile['cname'], template);\n  template = processMX(jsonZoneFile['mx'], template);\n  template = processPTR(jsonZoneFile['ptr'], template);\n  template = processTXT(jsonZoneFile['txt'], template);\n  template = processSRV(jsonZoneFile['srv'], template);\n  template = processSPF(jsonZoneFile['spf'], template);\n  template = processURI(jsonZoneFile['uri'], template);\n  template = processValues(jsonZoneFile, template);\n  return template.replace(/\\n{2,}/gim, '\\n\\n');\n}\n\n;\n\nfunction processOrigin(data, template) {\n  let ret = '';\n\n  if (typeof data !== 'undefined') {\n    ret += '$ORIGIN ' + data;\n  }\n\n  return template.replace('{$origin}', ret);\n}\n\n;\n\nfunction processTTL(data, template) {\n  let ret = '';\n\n  if (typeof data !== 'undefined') {\n    ret += '$TTL ' + data;\n  }\n\n  return template.replace('{$ttl}', ret);\n}\n\n;\n\nfunction processSOA(data, template) {\n  let ret = template;\n\n  if (typeof data !== 'undefined') {\n    data.name = data.name || '@';\n    data.ttl = data.ttl || '';\n\n    for (const key in data) {\n      const value = data[key];\n      ret = ret.replace('{' + key + '}', value + '\\t');\n    }\n  }\n\n  return ret;\n}\n\n;\n\nfunction processNS(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tNS\\t' + record.host + '\\n';\n    }\n  }\n\n  return template.replace('{ns}', ret);\n}\n\n;\n\nfunction processA(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tA\\t' + record.ip + '\\n';\n    }\n  }\n\n  return template.replace('{a}', ret);\n}\n\n;\n\nfunction processAAAA(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tAAAA\\t' + record.ip + '\\n';\n    }\n  }\n\n  return template.replace('{aaaa}', ret);\n}\n\n;\n\nfunction processCNAME(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tCNAME\\t' + record.alias + '\\n';\n    }\n  }\n\n  return template.replace('{cname}', ret);\n}\n\n;\n\nfunction processMX(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tMX\\t' + record.preference + '\\t' + record.host + '\\n';\n    }\n  }\n\n  return template.replace('{mx}', ret);\n}\n\n;\n\nfunction processPTR(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tPTR\\t' + record.host + '\\n';\n    }\n  }\n\n  return template.replace('{ptr}', ret);\n}\n\n;\n\nfunction processTXT(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tTXT\\t';\n      const txtData = record.txt;\n\n      if (typeof txtData === 'string') {\n        ret += '\"' + txtData + '\"';\n      } else if (txtData instanceof Array) {\n        ret += txtData.map(function (datum) {\n          return '\"' + datum + '\"';\n        }).join(' ');\n      }\n\n      ret += '\\n';\n    }\n  }\n\n  return template.replace('{txt}', ret);\n}\n\n;\n\nfunction processSRV(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tSRV\\t' + record.priority + '\\t';\n      ret += record.weight + '\\t';\n      ret += record.port + '\\t';\n      ret += record.target + '\\n';\n    }\n  }\n\n  return template.replace('{srv}', ret);\n}\n\n;\n\nfunction processSPF(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tSPF\\t' + record.data + '\\n';\n    }\n  }\n\n  return template.replace('{spf}', ret);\n}\n\n;\n\nfunction processURI(data, template) {\n  let ret = '';\n\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tURI\\t' + record.priority + '\\t';\n      ret += record.weight + '\\t';\n      ret += '\"' + record.target + '\"\\n';\n    }\n  }\n\n  return template.replace('{uri}', ret);\n}\n\n;\n\nfunction processValues(jsonZoneFile, template) {\n  template = template.replace('{zone}', jsonZoneFile['$origin'] || (jsonZoneFile['soa'] ? jsonZoneFile['soa']['name'] : false) || '');\n  template = template.replace('{datetime}', new Date().toISOString());\n  const time = Math.round(Date.now() / 1000);\n  return template.replace('{time}', `${time}`);\n}\n\n;"]},"metadata":{},"sourceType":"script"}
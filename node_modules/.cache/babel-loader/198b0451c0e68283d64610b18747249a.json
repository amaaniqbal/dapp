{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // @ts-ignore: Could not find a declaration file for module\n\nconst inspector = require(\"schema-inspector\");\n\nconst profileTokens_1 = require(\"./profileTokens\");\n\nconst profileProofs_1 = require(\"./profileProofs\");\n\nconst profileZoneFiles_1 = require(\"./profileZoneFiles\");\n\nconst schemaDefinition = {\n  type: 'object',\n  properties: {\n    '@context': {\n      type: 'string',\n      optional: true\n    },\n    '@type': {\n      type: 'string'\n    }\n  }\n};\n/**\n * Represents a user profile\n *\n */\n\nclass Profile {\n  constructor(profile = {}) {\n    this._profile = Object.assign({}, {\n      '@context': 'http://schema.org/'\n    }, profile);\n  }\n\n  toJSON() {\n    return Object.assign({}, this._profile);\n  }\n\n  toToken(privateKey) {\n    return profileTokens_1.signProfileToken(this.toJSON(), privateKey);\n  }\n\n  static validateSchema(profile, strict = false) {\n    schemaDefinition.strict = strict;\n    return inspector.validate(schemaDefinition, profile);\n  }\n\n  static fromToken(token, publicKeyOrAddress = null) {\n    const profile = profileTokens_1.extractProfile(token, publicKeyOrAddress);\n    return new Profile(profile);\n  }\n\n  static makeZoneFile(domainName, tokenFileURL) {\n    return profileZoneFiles_1.makeProfileZoneFile(domainName, tokenFileURL);\n  }\n\n  static validateProofs(domainName) {\n    return profileProofs_1.validateProofs(new Profile().toJSON(), domainName);\n  }\n\n}\n\nexports.Profile = Profile;","map":{"version":3,"sources":["../../src/profiles/profile.ts"],"names":[],"mappings":";;;;IAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAEA,MAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEA,MAAM,gBAAgB,GAAyB;AAC7C,EAAA,IAAI,EAAE,QADuC;AAE7C,EAAA,UAAU,EAAE;AACV,gBAAY;AAAE,MAAA,IAAI,EAAE,QAAR;AAAkB,MAAA,QAAQ,EAAE;AAA5B,KADF;AAEV,aAAS;AAAE,MAAA,IAAI,EAAE;AAAR;AAFC;AAFiC,CAA/C;AAQA;;;;;AAIA,MAAa,OAAb,CAAoB;AAGlB,EAAA,WAAA,CAAY,OAAO,GAAG,EAAtB,EAAwB;AACtB,SAAK,QAAL,GAAgB,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB;AAChC,kBAAY;AADoB,KAAlB,EAEb,OAFa,CAAhB;AAGD;;AAED,EAAA,MAAM,GAAA;AACJ,WAAO,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,QAAvB,CAAP;AACD;;AAED,EAAA,OAAO,CAAC,UAAD,EAAmB;AACxB,WAAO,eAAA,CAAA,gBAAA,CAAiB,KAAK,MAAL,EAAjB,EAAgC,UAAhC,CAAP;AACD;;AAED,SAAO,cAAP,CAAsB,OAAtB,EAAoC,MAAM,GAAG,KAA7C,EAAkD;AAChD,IAAA,gBAAgB,CAAC,MAAjB,GAA0B,MAA1B;AACA,WAAO,SAAS,CAAC,QAAV,CAAmB,gBAAnB,EAAqC,OAArC,CAAP;AACD;;AAED,SAAO,SAAP,CAAiB,KAAjB,EAAgC,kBAAA,GAAoC,IAApE,EAAwE;AACtE,UAAM,OAAO,GAAG,eAAA,CAAA,cAAA,CAAe,KAAf,EAAsB,kBAAtB,CAAhB;AACA,WAAO,IAAI,OAAJ,CAAY,OAAZ,CAAP;AACD;;AAED,SAAO,YAAP,CAAoB,UAApB,EAAwC,YAAxC,EAA4D;AAC1D,WAAO,kBAAA,CAAA,mBAAA,CAAoB,UAApB,EAAgC,YAAhC,CAAP;AACD;;AAED,SAAO,cAAP,CAAsB,UAAtB,EAAwC;AACtC,WAAO,eAAA,CAAA,cAAA,CAAe,IAAI,OAAJ,GAAc,MAAd,EAAf,EAAuC,UAAvC,CAAP;AACD;;AAjCiB;;AAApB,OAAA,CAAA,OAAA,GAAA,OAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// @ts-ignore: Could not find a declaration file for module\nconst inspector = require(\"schema-inspector\");\nconst profileTokens_1 = require(\"./profileTokens\");\nconst profileProofs_1 = require(\"./profileProofs\");\nconst profileZoneFiles_1 = require(\"./profileZoneFiles\");\nconst schemaDefinition = {\n    type: 'object',\n    properties: {\n        '@context': { type: 'string', optional: true },\n        '@type': { type: 'string' }\n    }\n};\n/**\n * Represents a user profile\n *\n */\nclass Profile {\n    constructor(profile = {}) {\n        this._profile = Object.assign({}, {\n            '@context': 'http://schema.org/'\n        }, profile);\n    }\n    toJSON() {\n        return Object.assign({}, this._profile);\n    }\n    toToken(privateKey) {\n        return profileTokens_1.signProfileToken(this.toJSON(), privateKey);\n    }\n    static validateSchema(profile, strict = false) {\n        schemaDefinition.strict = strict;\n        return inspector.validate(schemaDefinition, profile);\n    }\n    static fromToken(token, publicKeyOrAddress = null) {\n        const profile = profileTokens_1.extractProfile(token, publicKeyOrAddress);\n        return new Profile(profile);\n    }\n    static makeZoneFile(domainName, tokenFileURL) {\n        return profileZoneFiles_1.makeProfileZoneFile(domainName, tokenFileURL);\n    }\n    static validateProofs(domainName) {\n        return profileProofs_1.validateProofs(new Profile().toJSON(), domainName);\n    }\n}\nexports.Profile = Profile;\n//# sourceMappingURL=profile.js.map"]},"metadata":{},"sourceType":"script"}
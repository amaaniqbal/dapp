{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst cheerio = require(\"cheerio\");\n\nconst service_1 = require(\"./service\");\n\nclass Facebook extends service_1.Service {\n  static getProofUrl(proof) {\n    return this.normalizeUrl(proof);\n  }\n\n  static normalizeUrl(proof) {\n    let proofUrl = proof.proof_url.toLowerCase();\n    const urlRegex = /(?:http[s]*:\\/\\/){0,1}(?:[a-zA-Z0-9-]+\\.)+facebook\\.com/;\n    proofUrl = super.prefixScheme(proofUrl);\n\n    if (proofUrl.startsWith('https://facebook.com')) {\n      let tokens = proofUrl.split('https://facebook.com');\n      proofUrl = `https://www.facebook.com${tokens[1]}`;\n      tokens = proofUrl.split('https://www.facebook.com/')[1].split('/posts/');\n      const postId = tokens[1];\n      proofUrl = `https://www.facebook.com/${proof.identifier}/posts/${postId}`;\n    } else if (proofUrl.match(urlRegex)) {\n      const tokens = proofUrl.split('facebook.com/')[1].split('/posts/');\n      const postId = tokens[1];\n      proofUrl = `https://www.facebook.com/${proof.identifier}/posts/${postId}`;\n    } else {\n      throw new Error(`Proof url ${proof.proof_url} is not valid for service ${proof.service}`);\n    }\n\n    return proofUrl;\n  }\n\n  static getProofStatement(searchText) {\n    const $ = cheerio.load(searchText);\n    const statement = $('meta[name=\"description\"]').attr('content');\n    return statement !== undefined ? statement.trim() : '';\n  }\n\n}\n\nexports.Facebook = Facebook;","map":{"version":3,"sources":["../../../src/profiles/services/facebook.ts"],"names":[],"mappings":";;;;;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,MAAM,QAAN,SAAuB,SAAA,CAAA,OAAvB,CAA8B;AAC5B,SAAO,WAAP,CAAmB,KAAnB,EAA6B;AAC3B,WAAO,KAAK,YAAL,CAAkB,KAAlB,CAAP;AACD;;AAED,SAAO,YAAP,CAAoB,KAApB,EAA8B;AAC5B,QAAI,QAAQ,GAAG,KAAK,CAAC,SAAN,CAAgB,WAAhB,EAAf;AACA,UAAM,QAAQ,GAAG,yDAAjB;AAEA,IAAA,QAAQ,GAAG,MAAM,YAAN,CAAmB,QAAnB,CAAX;;AAEA,QAAI,QAAQ,CAAC,UAAT,CAAoB,sBAApB,CAAJ,EAAiD;AAC/C,UAAI,MAAM,GAAG,QAAQ,CAAC,KAAT,CAAe,sBAAf,CAAb;AACA,MAAA,QAAQ,GAAG,2BAA2B,MAAM,CAAC,CAAD,CAAG,EAA/C;AACA,MAAA,MAAM,GAAG,QAAQ,CAAC,KAAT,CAAe,2BAAf,EAA4C,CAA5C,EAA+C,KAA/C,CAAqD,SAArD,CAAT;AACA,YAAM,MAAM,GAAG,MAAM,CAAC,CAAD,CAArB;AACA,MAAA,QAAQ,GAAG,4BAA4B,KAAK,CAAC,UAAU,UAAU,MAAM,EAAvE;AACD,KAND,MAMO,IAAI,QAAQ,CAAC,KAAT,CAAe,QAAf,CAAJ,EAA8B;AACnC,YAAM,MAAM,GAAG,QAAQ,CAAC,KAAT,CAAe,eAAf,EAAgC,CAAhC,EAAmC,KAAnC,CAAyC,SAAzC,CAAf;AACA,YAAM,MAAM,GAAG,MAAM,CAAC,CAAD,CAArB;AACA,MAAA,QAAQ,GAAG,4BAA4B,KAAK,CAAC,UAAU,UAAU,MAAM,EAAvE;AACD,KAJM,MAIA;AACL,YAAM,IAAI,KAAJ,CAAU,aAAa,KAAK,CAAC,SAAS,6BAA6B,KAAK,CAAC,OAAO,EAAhF,CAAN;AACD;;AAED,WAAO,QAAP;AACD;;AAED,SAAO,iBAAP,CAAyB,UAAzB,EAA2C;AACzC,UAAM,CAAC,GAAG,OAAO,CAAC,IAAR,CAAa,UAAb,CAAV;AACA,UAAM,SAAS,GAAG,CAAC,CAAC,0BAAD,CAAD,CAA8B,IAA9B,CAAmC,SAAnC,CAAlB;AACA,WAAQ,SAAS,KAAK,SAAf,GAA4B,SAAS,CAAC,IAAV,EAA5B,GAA+C,EAAtD;AACD;;AAhC2B;;AAmCrB,OAAA,CAAA,QAAA,GAAA,QAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cheerio = require(\"cheerio\");\nconst service_1 = require(\"./service\");\nclass Facebook extends service_1.Service {\n    static getProofUrl(proof) {\n        return this.normalizeUrl(proof);\n    }\n    static normalizeUrl(proof) {\n        let proofUrl = proof.proof_url.toLowerCase();\n        const urlRegex = /(?:http[s]*:\\/\\/){0,1}(?:[a-zA-Z0-9-]+\\.)+facebook\\.com/;\n        proofUrl = super.prefixScheme(proofUrl);\n        if (proofUrl.startsWith('https://facebook.com')) {\n            let tokens = proofUrl.split('https://facebook.com');\n            proofUrl = `https://www.facebook.com${tokens[1]}`;\n            tokens = proofUrl.split('https://www.facebook.com/')[1].split('/posts/');\n            const postId = tokens[1];\n            proofUrl = `https://www.facebook.com/${proof.identifier}/posts/${postId}`;\n        }\n        else if (proofUrl.match(urlRegex)) {\n            const tokens = proofUrl.split('facebook.com/')[1].split('/posts/');\n            const postId = tokens[1];\n            proofUrl = `https://www.facebook.com/${proof.identifier}/posts/${postId}`;\n        }\n        else {\n            throw new Error(`Proof url ${proof.proof_url} is not valid for service ${proof.service}`);\n        }\n        return proofUrl;\n    }\n    static getProofStatement(searchText) {\n        const $ = cheerio.load(searchText);\n        const statement = $('meta[name=\"description\"]').attr('content');\n        return (statement !== undefined) ? statement.trim() : '';\n    }\n}\nexports.Facebook = Facebook;\n//# sourceMappingURL=facebook.js.map"]},"metadata":{},"sourceType":"script"}
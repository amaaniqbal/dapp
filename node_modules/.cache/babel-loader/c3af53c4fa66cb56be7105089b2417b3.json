{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tslib_1 = require(\"tslib\");\n\nconst protocolEchoDetection_1 = require(\"./auth/protocolEchoDetection\");\n\ntry {\n  /**\n   * Located here so it executes ASAP. The protocol handler detection is designed to work\n   * as a drop-in-replacement (non-breaking upgrade) for apps using blockstack.js. That\n   * requires doing this global and immediate detection.\n   * This function is also called in `isSignInPending` so that web app bundling the\n   * blockstack.js lib in a more modular way will still perform the protocol detection\n   * handling without any changes if this index file is not bundled in.\n   */\n  protocolEchoDetection_1.protocolEchoReplyDetection();\n} catch (error) {\n  console.error(`Error performing global protocol echo reply detection: ${error}`);\n}\n\ntslib_1.__exportStar(require(\"./auth\"), exports);\n\ntslib_1.__exportStar(require(\"./profiles\"), exports);\n\ntslib_1.__exportStar(require(\"./storage\"), exports);\n\nvar dids_1 = require(\"./dids\");\n\nexports.makeDIDFromAddress = dids_1.makeDIDFromAddress;\nexports.makeDIDFromPublicKey = dids_1.makeDIDFromPublicKey;\nexports.getDIDType = dids_1.getDIDType;\nexports.getAddressFromDID = dids_1.getAddressFromDID;\n\nvar keys_1 = require(\"./keys\");\n\nexports.getEntropy = keys_1.getEntropy;\nexports.makeECPrivateKey = keys_1.makeECPrivateKey;\nexports.publicKeyToAddress = keys_1.publicKeyToAddress;\nexports.getPublicKeyFromPrivate = keys_1.getPublicKeyFromPrivate;\nexports.hexStringToECPair = keys_1.hexStringToECPair;\nexports.ecPairToHexString = keys_1.ecPairToHexString;\nexports.ecPairToAddress = keys_1.ecPairToAddress;\n\nvar utils_1 = require(\"./utils\");\n\nexports.nextYear = utils_1.nextYear;\nexports.nextMonth = utils_1.nextMonth;\nexports.nextHour = utils_1.nextHour;\nexports.makeUUID4 = utils_1.makeUUID4;\nexports.updateQueryStringParameter = utils_1.updateQueryStringParameter;\nexports.isLaterVersion = utils_1.isLaterVersion;\nexports.isSameOriginAbsoluteUrl = utils_1.isSameOriginAbsoluteUrl;\n\nvar operations_1 = require(\"./operations\");\n\nexports.transactions = operations_1.transactions;\nexports.safety = operations_1.safety;\nexports.PubkeyHashSigner = operations_1.PubkeyHashSigner;\nexports.addUTXOsToFund = operations_1.addUTXOsToFund;\nexports.estimateTXBytes = operations_1.estimateTXBytes;\n\nvar wallet_1 = require(\"./wallet\");\n\nexports.BlockstackWallet = wallet_1.BlockstackWallet;\n\nvar network_1 = require(\"./network\");\n\nexports.network = network_1.network;\n\nvar jsontokens_1 = require(\"jsontokens\");\n\nexports.decodeToken = jsontokens_1.decodeToken;\n\nvar config_1 = require(\"./config\");\n\nexports.config = config_1.config;\n\nvar encryption_1 = require(\"./encryption\");\n\nexports.encryptMnemonic = encryption_1.encryptMnemonic;\nexports.decryptMnemonic = encryption_1.decryptMnemonic;\n\nvar userSession_1 = require(\"./auth/userSession\");\n\nexports.UserSession = userSession_1.UserSession;","map":{"version":3,"sources":["../src/public.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst protocolEchoDetection_1 = require(\"./auth/protocolEchoDetection\");\ntry {\n    /**\n     * Located here so it executes ASAP. The protocol handler detection is designed to work\n     * as a drop-in-replacement (non-breaking upgrade) for apps using blockstack.js. That\n     * requires doing this global and immediate detection.\n     * This function is also called in `isSignInPending` so that web app bundling the\n     * blockstack.js lib in a more modular way will still perform the protocol detection\n     * handling without any changes if this index file is not bundled in.\n     */\n    protocolEchoDetection_1.protocolEchoReplyDetection();\n}\ncatch (error) {\n    console.error(`Error performing global protocol echo reply detection: ${error}`);\n}\ntslib_1.__exportStar(require(\"./auth\"), exports);\ntslib_1.__exportStar(require(\"./profiles\"), exports);\ntslib_1.__exportStar(require(\"./storage\"), exports);\nvar dids_1 = require(\"./dids\");\nexports.makeDIDFromAddress = dids_1.makeDIDFromAddress;\nexports.makeDIDFromPublicKey = dids_1.makeDIDFromPublicKey;\nexports.getDIDType = dids_1.getDIDType;\nexports.getAddressFromDID = dids_1.getAddressFromDID;\nvar keys_1 = require(\"./keys\");\nexports.getEntropy = keys_1.getEntropy;\nexports.makeECPrivateKey = keys_1.makeECPrivateKey;\nexports.publicKeyToAddress = keys_1.publicKeyToAddress;\nexports.getPublicKeyFromPrivate = keys_1.getPublicKeyFromPrivate;\nexports.hexStringToECPair = keys_1.hexStringToECPair;\nexports.ecPairToHexString = keys_1.ecPairToHexString;\nexports.ecPairToAddress = keys_1.ecPairToAddress;\nvar utils_1 = require(\"./utils\");\nexports.nextYear = utils_1.nextYear;\nexports.nextMonth = utils_1.nextMonth;\nexports.nextHour = utils_1.nextHour;\nexports.makeUUID4 = utils_1.makeUUID4;\nexports.updateQueryStringParameter = utils_1.updateQueryStringParameter;\nexports.isLaterVersion = utils_1.isLaterVersion;\nexports.isSameOriginAbsoluteUrl = utils_1.isSameOriginAbsoluteUrl;\nvar operations_1 = require(\"./operations\");\nexports.transactions = operations_1.transactions;\nexports.safety = operations_1.safety;\nexports.PubkeyHashSigner = operations_1.PubkeyHashSigner;\nexports.addUTXOsToFund = operations_1.addUTXOsToFund;\nexports.estimateTXBytes = operations_1.estimateTXBytes;\nvar wallet_1 = require(\"./wallet\");\nexports.BlockstackWallet = wallet_1.BlockstackWallet;\nvar network_1 = require(\"./network\");\nexports.network = network_1.network;\nvar jsontokens_1 = require(\"jsontokens\");\nexports.decodeToken = jsontokens_1.decodeToken;\nvar config_1 = require(\"./config\");\nexports.config = config_1.config;\nvar encryption_1 = require(\"./encryption\");\nexports.encryptMnemonic = encryption_1.encryptMnemonic;\nexports.decryptMnemonic = encryption_1.decryptMnemonic;\nvar userSession_1 = require(\"./auth/userSession\");\nexports.UserSession = userSession_1.UserSession;\n//# sourceMappingURL=public.js.map"]},"metadata":{},"sourceType":"script"}
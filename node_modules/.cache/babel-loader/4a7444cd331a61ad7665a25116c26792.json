{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseZoneFile = parseZoneFile;\n\nfunction parseZoneFile(text) {\n  text = removeComments(text);\n  text = flatten(text);\n  return parseRRs(text);\n}\n\n;\n\nfunction removeComments(text) {\n  const re = /(^|[^\\\\]);.*/g;\n  return text.replace(re, function (m, g1) {\n    return g1 ? g1 : ''; // if g1 is set/matched, re-insert it, else remove\n  });\n}\n\nfunction flatten(text) {\n  const captured = [];\n  const re = /\\([\\s\\S]*?\\)/gim;\n  let match = re.exec(text);\n\n  while (match !== null) {\n    const replacement = match[0].replace(/\\s+/gm, ' ');\n    captured.push({\n      match,\n      replacement\n    }); // captured Text, index, input\n\n    match = re.exec(text);\n  }\n\n  const arrText = text.split('');\n\n  for (const cur of captured) {\n    const {\n      match,\n      replacement\n    } = cur;\n    arrText.splice(match.index, match[0].length, replacement);\n  }\n\n  return arrText.join('').replace(/\\(|\\)/gim, ' ');\n}\n\nfunction parseRRs(text) {\n  const ret = {};\n  const rrs = text.split('\\n');\n\n  for (const rr of rrs) {\n    if (!rr || !rr.trim()) {\n      continue;\n    }\n\n    const uRR = rr.toUpperCase();\n\n    if (/\\s+TXT\\s+/.test(uRR)) {\n      ret.txt = ret.txt || [];\n      ret.txt.push(parseTXT(rr));\n    } else if (uRR.indexOf('$ORIGIN') === 0) {\n      ret.$origin = rr.split(/\\s+/g)[1];\n    } else if (uRR.indexOf('$TTL') === 0) {\n      ret.$ttl = parseInt(rr.split(/\\s+/g)[1], 10);\n    } else if (/\\s+SOA\\s+/.test(uRR)) {\n      ret.soa = parseSOA(rr);\n    } else if (/\\s+NS\\s+/.test(uRR)) {\n      ret.ns = ret.ns || [];\n      ret.ns.push(parseNS(rr));\n    } else if (/\\s+A\\s+/.test(uRR)) {\n      ret.a = ret.a || [];\n      ret.a.push(parseA(rr, ret.a));\n    } else if (/\\s+AAAA\\s+/.test(uRR)) {\n      ret.aaaa = ret.aaaa || [];\n      ret.aaaa.push(parseAAAA(rr));\n    } else if (/\\s+CNAME\\s+/.test(uRR)) {\n      ret.cname = ret.cname || [];\n      ret.cname.push(parseCNAME(rr));\n    } else if (/\\s+MX\\s+/.test(uRR)) {\n      ret.mx = ret.mx || [];\n      ret.mx.push(parseMX(rr));\n    } else if (/\\s+PTR\\s+/.test(uRR)) {\n      ret.ptr = ret.ptr || [];\n      ret.ptr.push(parsePTR(rr, ret.ptr, ret.$origin));\n    } else if (/\\s+SRV\\s+/.test(uRR)) {\n      ret.srv = ret.srv || [];\n      ret.srv.push(parseSRV(rr));\n    } else if (/\\s+SPF\\s+/.test(uRR)) {\n      ret.spf = ret.spf || [];\n      ret.spf.push(parseSPF(rr));\n    } else if (/\\s+URI\\s+/.test(uRR)) {\n      ret.uri = ret.uri || [];\n      ret.uri.push(parseURI(rr));\n    }\n  }\n\n  return ret;\n}\n\nfunction parseSOA(rr) {\n  const soa = {};\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  soa.name = rrTokens[0];\n  soa.minimum = parseInt(rrTokens[l - 1], 10);\n  soa.expire = parseInt(rrTokens[l - 2], 10);\n  soa.retry = parseInt(rrTokens[l - 3], 10);\n  soa.refresh = parseInt(rrTokens[l - 4], 10);\n  soa.serial = parseInt(rrTokens[l - 5], 10);\n  soa.rname = rrTokens[l - 6];\n  soa.mname = rrTokens[l - 7];\n  if (!isNaN(rrTokens[1])) soa.ttl = parseInt(rrTokens[1], 10);\n  return soa;\n}\n\nfunction parseNS(rr) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result = {\n    name: rrTokens[0],\n    host: rrTokens[l - 1]\n  };\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseA(rr, recordsSoFar) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const urrTokens = rr.trim().toUpperCase().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result = {\n    name: rrTokens[0],\n    ip: rrTokens[l - 1]\n  };\n\n  if (urrTokens.lastIndexOf('A') === 0) {\n    if (recordsSoFar.length) {\n      result.name = recordsSoFar[recordsSoFar.length - 1].name;\n    } else {\n      result.name = '@';\n    }\n  }\n\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseAAAA(rr) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result = {\n    name: rrTokens[0],\n    ip: rrTokens[l - 1]\n  };\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseCNAME(rr) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result = {\n    name: rrTokens[0],\n    alias: rrTokens[l - 1]\n  };\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseMX(rr) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result = {\n    name: rrTokens[0],\n    preference: parseInt(rrTokens[l - 2], 10),\n    host: rrTokens[l - 1]\n  };\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseTXT(rr) {\n  const rrTokens = rr.trim().match(/[^\\s\\\"']+|\\\"[^\\\"]*\\\"|'[^']*'/g);\n  if (!rrTokens) throw new Error('Failure to tokenize TXT record');\n  const l = rrTokens.length;\n  const indexTXT = rrTokens.indexOf('TXT');\n\n  function stripText(txt) {\n    if (txt.indexOf('\\\"') > -1) {\n      txt = txt.split('\\\"')[1];\n    }\n\n    if (txt.indexOf('\"') > -1) {\n      txt = txt.split('\"')[1];\n    }\n\n    return txt;\n  }\n\n  let tokenTxt;\n\n  if (l - indexTXT - 1 > 1) {\n    tokenTxt = rrTokens.slice(indexTXT + 1).map(stripText);\n  } else {\n    tokenTxt = stripText(rrTokens[l - 1]);\n  }\n\n  const result = {\n    name: rrTokens[0],\n    txt: tokenTxt\n  };\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parsePTR(rr, recordsSoFar, currentOrigin) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const urrTokens = rr.trim().toUpperCase().split(/\\s+/g);\n\n  if (urrTokens.lastIndexOf('PTR') === 0 && recordsSoFar[recordsSoFar.length - 1]) {\n    rrTokens.unshift(recordsSoFar[recordsSoFar.length - 1].name);\n  }\n\n  const l = rrTokens.length;\n  const result = {\n    name: rrTokens[0],\n    fullname: rrTokens[0] + '.' + currentOrigin,\n    host: rrTokens[l - 1]\n  };\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseSRV(rr) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result = {\n    name: rrTokens[0],\n    target: rrTokens[l - 1],\n    priority: parseInt(rrTokens[l - 4], 10),\n    weight: parseInt(rrTokens[l - 3], 10),\n    port: parseInt(rrTokens[l - 2], 10)\n  };\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseSPF(rr) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const result = {\n    name: rrTokens[0],\n    data: ''\n  };\n  let l = rrTokens.length;\n\n  while (l-- > 4) {\n    result.data = rrTokens[l] + ' ' + result.data.trim();\n  }\n\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseURI(rr) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result = {\n    name: rrTokens[0],\n    target: rrTokens[l - 1].replace(/\"/g, ''),\n    priority: parseInt(rrTokens[l - 3], 10),\n    weight: parseInt(rrTokens[l - 2], 10)\n  };\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}","map":{"version":3,"sources":["/home/os/Desktop/hello-world-tutorial/node_modules/zone-file/lib/parseZoneFile.js"],"names":["Object","defineProperty","exports","value","parseZoneFile","text","removeComments","flatten","parseRRs","re","replace","m","g1","captured","match","exec","replacement","push","arrText","split","cur","splice","index","length","join","ret","rrs","rr","trim","uRR","toUpperCase","test","txt","parseTXT","indexOf","$origin","$ttl","parseInt","soa","parseSOA","ns","parseNS","a","parseA","aaaa","parseAAAA","cname","parseCNAME","mx","parseMX","ptr","parsePTR","srv","parseSRV","spf","parseSPF","uri","parseURI","rrTokens","l","name","minimum","expire","retry","refresh","serial","rname","mname","isNaN","ttl","result","host","recordsSoFar","urrTokens","ip","lastIndexOf","alias","preference","Error","indexTXT","stripText","tokenTxt","slice","map","currentOrigin","unshift","fullname","target","priority","weight","port","data"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseZoneFile = parseZoneFile;\n\nfunction parseZoneFile(text) {\n  text = removeComments(text);\n  text = flatten(text);\n  return parseRRs(text);\n}\n\n;\n\nfunction removeComments(text) {\n  const re = /(^|[^\\\\]);.*/g;\n  return text.replace(re, function (m, g1) {\n    return g1 ? g1 : ''; // if g1 is set/matched, re-insert it, else remove\n  });\n}\n\nfunction flatten(text) {\n  const captured = [];\n  const re = /\\([\\s\\S]*?\\)/gim;\n  let match = re.exec(text);\n\n  while (match !== null) {\n    const replacement = match[0].replace(/\\s+/gm, ' ');\n    captured.push({\n      match,\n      replacement\n    }); // captured Text, index, input\n\n    match = re.exec(text);\n  }\n\n  const arrText = text.split('');\n\n  for (const cur of captured) {\n    const {\n      match,\n      replacement\n    } = cur;\n    arrText.splice(match.index, match[0].length, replacement);\n  }\n\n  return arrText.join('').replace(/\\(|\\)/gim, ' ');\n}\n\nfunction parseRRs(text) {\n  const ret = {};\n  const rrs = text.split('\\n');\n\n  for (const rr of rrs) {\n    if (!rr || !rr.trim()) {\n      continue;\n    }\n\n    const uRR = rr.toUpperCase();\n\n    if (/\\s+TXT\\s+/.test(uRR)) {\n      ret.txt = ret.txt || [];\n      ret.txt.push(parseTXT(rr));\n    } else if (uRR.indexOf('$ORIGIN') === 0) {\n      ret.$origin = rr.split(/\\s+/g)[1];\n    } else if (uRR.indexOf('$TTL') === 0) {\n      ret.$ttl = parseInt(rr.split(/\\s+/g)[1], 10);\n    } else if (/\\s+SOA\\s+/.test(uRR)) {\n      ret.soa = parseSOA(rr);\n    } else if (/\\s+NS\\s+/.test(uRR)) {\n      ret.ns = ret.ns || [];\n      ret.ns.push(parseNS(rr));\n    } else if (/\\s+A\\s+/.test(uRR)) {\n      ret.a = ret.a || [];\n      ret.a.push(parseA(rr, ret.a));\n    } else if (/\\s+AAAA\\s+/.test(uRR)) {\n      ret.aaaa = ret.aaaa || [];\n      ret.aaaa.push(parseAAAA(rr));\n    } else if (/\\s+CNAME\\s+/.test(uRR)) {\n      ret.cname = ret.cname || [];\n      ret.cname.push(parseCNAME(rr));\n    } else if (/\\s+MX\\s+/.test(uRR)) {\n      ret.mx = ret.mx || [];\n      ret.mx.push(parseMX(rr));\n    } else if (/\\s+PTR\\s+/.test(uRR)) {\n      ret.ptr = ret.ptr || [];\n      ret.ptr.push(parsePTR(rr, ret.ptr, ret.$origin));\n    } else if (/\\s+SRV\\s+/.test(uRR)) {\n      ret.srv = ret.srv || [];\n      ret.srv.push(parseSRV(rr));\n    } else if (/\\s+SPF\\s+/.test(uRR)) {\n      ret.spf = ret.spf || [];\n      ret.spf.push(parseSPF(rr));\n    } else if (/\\s+URI\\s+/.test(uRR)) {\n      ret.uri = ret.uri || [];\n      ret.uri.push(parseURI(rr));\n    }\n  }\n\n  return ret;\n}\n\nfunction parseSOA(rr) {\n  const soa = {};\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  soa.name = rrTokens[0];\n  soa.minimum = parseInt(rrTokens[l - 1], 10);\n  soa.expire = parseInt(rrTokens[l - 2], 10);\n  soa.retry = parseInt(rrTokens[l - 3], 10);\n  soa.refresh = parseInt(rrTokens[l - 4], 10);\n  soa.serial = parseInt(rrTokens[l - 5], 10);\n  soa.rname = rrTokens[l - 6];\n  soa.mname = rrTokens[l - 7];\n  if (!isNaN(rrTokens[1])) soa.ttl = parseInt(rrTokens[1], 10);\n  return soa;\n}\n\nfunction parseNS(rr) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result = {\n    name: rrTokens[0],\n    host: rrTokens[l - 1]\n  };\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseA(rr, recordsSoFar) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const urrTokens = rr.trim().toUpperCase().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result = {\n    name: rrTokens[0],\n    ip: rrTokens[l - 1]\n  };\n\n  if (urrTokens.lastIndexOf('A') === 0) {\n    if (recordsSoFar.length) {\n      result.name = recordsSoFar[recordsSoFar.length - 1].name;\n    } else {\n      result.name = '@';\n    }\n  }\n\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseAAAA(rr) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result = {\n    name: rrTokens[0],\n    ip: rrTokens[l - 1]\n  };\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseCNAME(rr) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result = {\n    name: rrTokens[0],\n    alias: rrTokens[l - 1]\n  };\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseMX(rr) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result = {\n    name: rrTokens[0],\n    preference: parseInt(rrTokens[l - 2], 10),\n    host: rrTokens[l - 1]\n  };\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseTXT(rr) {\n  const rrTokens = rr.trim().match(/[^\\s\\\"']+|\\\"[^\\\"]*\\\"|'[^']*'/g);\n  if (!rrTokens) throw new Error('Failure to tokenize TXT record');\n  const l = rrTokens.length;\n  const indexTXT = rrTokens.indexOf('TXT');\n\n  function stripText(txt) {\n    if (txt.indexOf('\\\"') > -1) {\n      txt = txt.split('\\\"')[1];\n    }\n\n    if (txt.indexOf('\"') > -1) {\n      txt = txt.split('\"')[1];\n    }\n\n    return txt;\n  }\n\n  let tokenTxt;\n\n  if (l - indexTXT - 1 > 1) {\n    tokenTxt = rrTokens.slice(indexTXT + 1).map(stripText);\n  } else {\n    tokenTxt = stripText(rrTokens[l - 1]);\n  }\n\n  const result = {\n    name: rrTokens[0],\n    txt: tokenTxt\n  };\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parsePTR(rr, recordsSoFar, currentOrigin) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const urrTokens = rr.trim().toUpperCase().split(/\\s+/g);\n\n  if (urrTokens.lastIndexOf('PTR') === 0 && recordsSoFar[recordsSoFar.length - 1]) {\n    rrTokens.unshift(recordsSoFar[recordsSoFar.length - 1].name);\n  }\n\n  const l = rrTokens.length;\n  const result = {\n    name: rrTokens[0],\n    fullname: rrTokens[0] + '.' + currentOrigin,\n    host: rrTokens[l - 1]\n  };\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseSRV(rr) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result = {\n    name: rrTokens[0],\n    target: rrTokens[l - 1],\n    priority: parseInt(rrTokens[l - 4], 10),\n    weight: parseInt(rrTokens[l - 3], 10),\n    port: parseInt(rrTokens[l - 2], 10)\n  };\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseSPF(rr) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const result = {\n    name: rrTokens[0],\n    data: ''\n  };\n  let l = rrTokens.length;\n\n  while (l-- > 4) {\n    result.data = rrTokens[l] + ' ' + result.data.trim();\n  }\n\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseURI(rr) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result = {\n    name: rrTokens[0],\n    target: rrTokens[l - 1].replace(/\"/g, ''),\n    priority: parseInt(rrTokens[l - 3], 10),\n    weight: parseInt(rrTokens[l - 2], 10)\n  };\n  if (!isNaN(rrTokens[1])) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tslib_1 = require(\"tslib\");\n\nconst cryptoUtils_1 = require(\"./cryptoUtils\");\n\nclass NodeCryptoAesCipher {\n  constructor(createCipher, createDecipher) {\n    this.createCipher = createCipher;\n    this.createDecipher = createDecipher;\n  }\n\n  encrypt(algorithm, key, iv, data) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (algorithm !== 'aes-128-cbc' && algorithm !== 'aes-256-cbc') {\n        throw new Error(`Unsupported cipher algorithm \"${algorithm}\"`);\n      }\n\n      const cipher = this.createCipher(algorithm, key, iv);\n      const result = Buffer.concat([cipher.update(data), cipher.final()]);\n      return Promise.resolve(result);\n    });\n  }\n\n  decrypt(algorithm, key, iv, data) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (algorithm !== 'aes-128-cbc' && algorithm !== 'aes-256-cbc') {\n        throw new Error(`Unsupported cipher algorithm \"${algorithm}\"`);\n      }\n\n      const cipher = this.createDecipher(algorithm, key, iv);\n      const result = Buffer.concat([cipher.update(data), cipher.final()]);\n      return Promise.resolve(result);\n    });\n  }\n\n}\n\nexports.NodeCryptoAesCipher = NodeCryptoAesCipher;\n\nclass WebCryptoAesCipher {\n  constructor(subtleCrypto) {\n    this.subtleCrypto = subtleCrypto;\n  }\n\n  encrypt(algorithm, key, iv, data) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      let algo;\n      let length;\n\n      if (algorithm === 'aes-128-cbc') {\n        algo = 'AES-CBC';\n        length = 128;\n      } else if (algorithm === 'aes-256-cbc') {\n        algo = 'AES-CBC';\n        length = 256;\n      } else {\n        throw new Error(`Unsupported cipher algorithm \"${algorithm}\"`);\n      }\n\n      const cryptoKey = yield this.subtleCrypto.importKey('raw', key, {\n        name: algo,\n        length\n      }, false, ['encrypt']);\n      const result = yield this.subtleCrypto.encrypt({\n        name: algo,\n        iv\n      }, cryptoKey, data);\n      return Buffer.from(result);\n    });\n  }\n\n  decrypt(algorithm, key, iv, data) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      let algo;\n      let length;\n\n      if (algorithm === 'aes-128-cbc') {\n        algo = 'AES-CBC';\n        length = 128;\n      } else if (algorithm === 'aes-256-cbc') {\n        algo = 'AES-CBC';\n        length = 256;\n      } else {\n        throw new Error(`Unsupported cipher algorithm \"${algorithm}\"`);\n      }\n\n      const cryptoKey = yield this.subtleCrypto.importKey('raw', key, {\n        name: algo,\n        length\n      }, false, ['decrypt']);\n      const result = yield this.subtleCrypto.decrypt({\n        name: algo,\n        iv\n      }, cryptoKey, data);\n      return Buffer.from(result);\n    });\n  }\n\n}\n\nexports.WebCryptoAesCipher = WebCryptoAesCipher;\n\nfunction createCipher() {\n  return tslib_1.__awaiter(this, void 0, void 0, function* () {\n    const cryptoLib = yield cryptoUtils_1.getCryptoLib();\n\n    if (cryptoLib.name === 'subtleCrypto') {\n      return new WebCryptoAesCipher(cryptoLib.lib);\n    } else {\n      return new NodeCryptoAesCipher(cryptoLib.lib.createCipheriv, cryptoLib.lib.createDecipheriv);\n    }\n  });\n}\n\nexports.createCipher = createCipher;","map":{"version":3,"sources":["../../src/encryption/aesCipher.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst cryptoUtils_1 = require(\"./cryptoUtils\");\nclass NodeCryptoAesCipher {\n    constructor(createCipher, createDecipher) {\n        this.createCipher = createCipher;\n        this.createDecipher = createDecipher;\n    }\n    encrypt(algorithm, key, iv, data) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (algorithm !== 'aes-128-cbc' && algorithm !== 'aes-256-cbc') {\n                throw new Error(`Unsupported cipher algorithm \"${algorithm}\"`);\n            }\n            const cipher = this.createCipher(algorithm, key, iv);\n            const result = Buffer.concat([cipher.update(data), cipher.final()]);\n            return Promise.resolve(result);\n        });\n    }\n    decrypt(algorithm, key, iv, data) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (algorithm !== 'aes-128-cbc' && algorithm !== 'aes-256-cbc') {\n                throw new Error(`Unsupported cipher algorithm \"${algorithm}\"`);\n            }\n            const cipher = this.createDecipher(algorithm, key, iv);\n            const result = Buffer.concat([cipher.update(data), cipher.final()]);\n            return Promise.resolve(result);\n        });\n    }\n}\nexports.NodeCryptoAesCipher = NodeCryptoAesCipher;\nclass WebCryptoAesCipher {\n    constructor(subtleCrypto) {\n        this.subtleCrypto = subtleCrypto;\n    }\n    encrypt(algorithm, key, iv, data) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            let algo;\n            let length;\n            if (algorithm === 'aes-128-cbc') {\n                algo = 'AES-CBC';\n                length = 128;\n            }\n            else if (algorithm === 'aes-256-cbc') {\n                algo = 'AES-CBC';\n                length = 256;\n            }\n            else {\n                throw new Error(`Unsupported cipher algorithm \"${algorithm}\"`);\n            }\n            const cryptoKey = yield this.subtleCrypto.importKey('raw', key, { name: algo, length }, false, ['encrypt']);\n            const result = yield this.subtleCrypto.encrypt({ name: algo, iv }, cryptoKey, data);\n            return Buffer.from(result);\n        });\n    }\n    decrypt(algorithm, key, iv, data) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            let algo;\n            let length;\n            if (algorithm === 'aes-128-cbc') {\n                algo = 'AES-CBC';\n                length = 128;\n            }\n            else if (algorithm === 'aes-256-cbc') {\n                algo = 'AES-CBC';\n                length = 256;\n            }\n            else {\n                throw new Error(`Unsupported cipher algorithm \"${algorithm}\"`);\n            }\n            const cryptoKey = yield this.subtleCrypto.importKey('raw', key, { name: algo, length }, false, ['decrypt']);\n            const result = yield this.subtleCrypto.decrypt({ name: algo, iv }, cryptoKey, data);\n            return Buffer.from(result);\n        });\n    }\n}\nexports.WebCryptoAesCipher = WebCryptoAesCipher;\nfunction createCipher() {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        const cryptoLib = yield cryptoUtils_1.getCryptoLib();\n        if (cryptoLib.name === 'subtleCrypto') {\n            return new WebCryptoAesCipher(cryptoLib.lib);\n        }\n        else {\n            return new NodeCryptoAesCipher(cryptoLib.lib.createCipheriv, cryptoLib.lib.createDecipheriv);\n        }\n    });\n}\nexports.createCipher = createCipher;\n//# sourceMappingURL=aesCipher.js.map"]},"metadata":{},"sourceType":"script"}
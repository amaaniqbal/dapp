{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst service_1 = require(\"./service\");\n\nclass Twitter extends service_1.Service {\n  getBaseUrls() {\n    const baseUrls = ['https://twitter.com/', 'http://twitter.com/', 'twitter.com/'];\n    return baseUrls;\n  }\n\n  normalizeUrl(_proof) {\n    return '';\n  }\n\n  getProofStatement(searchText, cheerio) {\n    const $ = cheerio.load(searchText);\n    const statement = $('meta[property=\"og:description\"]').attr('content');\n\n    if (statement !== undefined) {\n      return statement.trim().replace('“', '').replace('”', '');\n    } else {\n      return '';\n    }\n  }\n\n  getProofUrl(proof) {\n    const baseUrls = this.getBaseUrls();\n    let proofUrl = proof.proof_url.toLowerCase();\n    proofUrl = this.prefixScheme(proofUrl);\n\n    for (let i = 0; i < baseUrls.length; i++) {\n      const requiredPrefix = `${baseUrls[i]}${proof.identifier}`.toLowerCase();\n\n      if (proofUrl.startsWith(requiredPrefix)) {\n        return proofUrl;\n      }\n    }\n\n    throw new Error(`Proof url ${proof.proof_url} is not valid for service ${proof.service}`);\n  }\n\n}\n\nexports.Twitter = Twitter;","map":{"version":3,"sources":["../../../src/profiles/services/twitter.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAGA,MAAM,OAAN,SAAsB,SAAA,CAAA,OAAtB,CAA6B;AAC3B,EAAA,WAAW,GAAA;AACT,UAAM,QAAQ,GAAG,CACf,sBADe,EAEf,qBAFe,EAGf,cAHe,CAAjB;AAKA,WAAO,QAAP;AACD;;AAED,EAAA,YAAY,CAAC,MAAD,EAAyB;AACnC,WAAO,EAAP;AACD;;AAED,EAAA,iBAAiB,CAAC,UAAD,EAAqB,OAArB,EAA+C;AAC9D,UAAM,CAAC,GAAG,OAAO,CAAC,IAAR,CAAa,UAAb,CAAV;AACA,UAAM,SAAS,GAAG,CAAC,CAAC,iCAAD,CAAD,CAAqC,IAArC,CAA0C,SAA1C,CAAlB;;AACA,QAAI,SAAS,KAAK,SAAlB,EAA6B;AAC3B,aAAO,SAAS,CAAC,IAAV,GAAiB,OAAjB,CAAyB,GAAzB,EAA8B,EAA9B,EAAkC,OAAlC,CAA0C,GAA1C,EAA+C,EAA/C,CAAP;AACD,KAFD,MAEO;AACL,aAAO,EAAP;AACD;AACF;;AAED,EAAA,WAAW,CAAC,KAAD,EAAwB;AACjC,UAAM,QAAQ,GAAG,KAAK,WAAL,EAAjB;AAEA,QAAI,QAAQ,GAAG,KAAK,CAAC,SAAN,CAAgB,WAAhB,EAAf;AACA,IAAA,QAAQ,GAAG,KAAK,YAAL,CAAkB,QAAlB,CAAX;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,YAAM,cAAc,GAAG,GAAG,QAAQ,CAAC,CAAD,CAAG,GAAG,KAAK,CAAC,UAAU,EAAjC,CAAoC,WAApC,EAAvB;;AACA,UAAI,QAAQ,CAAC,UAAT,CAAoB,cAApB,CAAJ,EAAyC;AACvC,eAAO,QAAP;AACD;AACF;;AACD,UAAM,IAAI,KAAJ,CAAU,aAAa,KAAK,CAAC,SAAS,6BAA6B,KAAK,CAAC,OAAO,EAAhF,CAAN;AACD;;AArC0B;;AAwCpB,OAAA,CAAA,OAAA,GAAA,OAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst service_1 = require(\"./service\");\nclass Twitter extends service_1.Service {\n    getBaseUrls() {\n        const baseUrls = [\n            'https://twitter.com/',\n            'http://twitter.com/',\n            'twitter.com/'\n        ];\n        return baseUrls;\n    }\n    normalizeUrl(_proof) {\n        return '';\n    }\n    getProofStatement(searchText, cheerio) {\n        const $ = cheerio.load(searchText);\n        const statement = $('meta[property=\"og:description\"]').attr('content');\n        if (statement !== undefined) {\n            return statement.trim().replace('“', '').replace('”', '');\n        }\n        else {\n            return '';\n        }\n    }\n    getProofUrl(proof) {\n        const baseUrls = this.getBaseUrls();\n        let proofUrl = proof.proof_url.toLowerCase();\n        proofUrl = this.prefixScheme(proofUrl);\n        for (let i = 0; i < baseUrls.length; i++) {\n            const requiredPrefix = `${baseUrls[i]}${proof.identifier}`.toLowerCase();\n            if (proofUrl.startsWith(requiredPrefix)) {\n                return proofUrl;\n            }\n        }\n        throw new Error(`Proof url ${proof.proof_url} is not valid for service ${proof.service}`);\n    }\n}\nexports.Twitter = Twitter;\n//# sourceMappingURL=twitter.js.map"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"../utils\");\n/**\n * Class representing a transaction signer for pubkeyhash addresses\n * (a.k.a. single-sig addresses)\n * @private\n * @ignore\n */\n\n\nclass PubkeyHashSigner {\n  constructor(ecPair) {\n    this.ecPair = ecPair;\n  }\n\n  static fromHexString(keyHex) {\n    return new PubkeyHashSigner(utils_1.hexStringToECPair(keyHex));\n  }\n\n  signerVersion() {\n    return 1;\n  }\n\n  getAddress() {\n    return Promise.resolve().then(() => utils_1.ecPairToAddress(this.ecPair));\n  }\n\n  signTransaction(transaction, inputIndex) {\n    return Promise.resolve().then(() => {\n      transaction.sign(inputIndex, this.ecPair);\n    });\n  }\n\n}\n\nexports.PubkeyHashSigner = PubkeyHashSigner;","map":{"version":3,"sources":["../../src/operations/signers.ts"],"names":[],"mappings":";;;;;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AA6BA;;;;;;;;AAMA,MAAa,gBAAb,CAA6B;AAG3B,EAAA,WAAA,CAAY,MAAZ,EAA0C;AACxC,SAAK,MAAL,GAAc,MAAd;AACD;;AAED,SAAO,aAAP,CAAqB,MAArB,EAAmC;AACjC,WAAO,IAAI,gBAAJ,CAAqB,OAAA,CAAA,iBAAA,CAAkB,MAAlB,CAArB,CAAP;AACD;;AAED,EAAA,aAAa,GAAA;AACX,WAAO,CAAP;AACD;;AAED,EAAA,UAAU,GAAA;AACR,WAAO,OAAO,CAAC,OAAR,GACJ,IADI,CACC,MAAM,OAAA,CAAA,eAAA,CAAgB,KAAK,MAArB,CADP,CAAP;AAED;;AAED,EAAA,eAAe,CAAC,WAAD,EAAkC,UAAlC,EAAoD;AACjE,WAAO,OAAO,CAAC,OAAR,GACJ,IADI,CACC,MAAK;AACT,MAAA,WAAW,CAAC,IAAZ,CAAiB,UAAjB,EAA6B,KAAK,MAAlC;AACD,KAHI,CAAP;AAID;;AAzB0B;;AAA7B,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"../utils\");\n/**\n * Class representing a transaction signer for pubkeyhash addresses\n * (a.k.a. single-sig addresses)\n * @private\n * @ignore\n */\nclass PubkeyHashSigner {\n    constructor(ecPair) {\n        this.ecPair = ecPair;\n    }\n    static fromHexString(keyHex) {\n        return new PubkeyHashSigner(utils_1.hexStringToECPair(keyHex));\n    }\n    signerVersion() {\n        return 1;\n    }\n    getAddress() {\n        return Promise.resolve()\n            .then(() => utils_1.ecPairToAddress(this.ecPair));\n    }\n    signTransaction(transaction, inputIndex) {\n        return Promise.resolve()\n            .then(() => {\n            transaction.sign(inputIndex, this.ecPair);\n        });\n    }\n}\nexports.PubkeyHashSigner = PubkeyHashSigner;\n//# sourceMappingURL=signers.js.map"]},"metadata":{},"sourceType":"script"}
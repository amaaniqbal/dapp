{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst sessionData_1 = require(\"./sessionData\"); // import { BLOCKSTACK_GAIA_HUB_LABEL } from '../storage/hub'\n\n\nconst authConstants_1 = require(\"./authConstants\");\n\nconst errors_1 = require(\"../errors\"); // import { Logger } from '../logger'\n\n/**\n * An abstract class representing the SessionDataStore interface.\n\n */\n\n\nclass SessionDataStore {\n  constructor(sessionOptions) {\n    if (sessionOptions) {\n      const newSessionData = new sessionData_1.SessionData(sessionOptions);\n      this.setSessionData(newSessionData);\n    }\n  }\n\n  getSessionData() {\n    throw new Error('Abstract class');\n  }\n  /* eslint-disable */\n\n\n  setSessionData(session) {\n    throw new Error('Abstract class');\n  }\n\n  deleteSessionData() {\n    throw new Error('Abstract class');\n  }\n\n}\n\nexports.SessionDataStore = SessionDataStore;\n/**\n * Stores session data in the instance of this class.\n * @ignore\n */\n\nclass InstanceDataStore extends SessionDataStore {\n  constructor(sessionOptions) {\n    super(sessionOptions);\n\n    if (!this.sessionData) {\n      this.setSessionData(new sessionData_1.SessionData({}));\n    }\n  }\n\n  getSessionData() {\n    if (!this.sessionData) {\n      throw new errors_1.NoSessionDataError('No session data was found.');\n    }\n\n    return this.sessionData;\n  }\n\n  setSessionData(session) {\n    this.sessionData = session;\n    return true;\n  }\n\n  deleteSessionData() {\n    this.setSessionData(new sessionData_1.SessionData({}));\n    return true;\n  }\n\n}\n\nexports.InstanceDataStore = InstanceDataStore;\n/**\n * Stores session data in browser a localStorage entry.\n * @ignore\n */\n\nclass LocalStorageStore extends SessionDataStore {\n  constructor(sessionOptions) {\n    super(sessionOptions);\n\n    if (sessionOptions && sessionOptions.storeOptions && sessionOptions.storeOptions.localStorageKey && typeof sessionOptions.storeOptions.localStorageKey === 'string') {\n      this.key = sessionOptions.storeOptions.localStorageKey;\n    } else {\n      this.key = authConstants_1.LOCALSTORAGE_SESSION_KEY;\n    }\n\n    const data = localStorage.getItem(this.key);\n\n    if (!data) {\n      const sessionData = new sessionData_1.SessionData({});\n      this.setSessionData(sessionData);\n    }\n  }\n\n  getSessionData() {\n    const data = localStorage.getItem(this.key);\n\n    if (!data) {\n      throw new errors_1.NoSessionDataError('No session data was found in localStorage');\n    }\n\n    const dataJSON = JSON.parse(data);\n    return sessionData_1.SessionData.fromJSON(dataJSON);\n  }\n\n  setSessionData(session) {\n    localStorage.setItem(this.key, session.toString());\n    return true;\n  }\n\n  deleteSessionData() {\n    localStorage.removeItem(this.key);\n    this.setSessionData(new sessionData_1.SessionData({}));\n    return true;\n  }\n\n}\n\nexports.LocalStorageStore = LocalStorageStore;","map":{"version":3,"sources":["../../src/auth/sessionStore.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst sessionData_1 = require(\"./sessionData\");\n// import { BLOCKSTACK_GAIA_HUB_LABEL } from '../storage/hub'\nconst authConstants_1 = require(\"./authConstants\");\nconst errors_1 = require(\"../errors\");\n// import { Logger } from '../logger'\n/**\n * An abstract class representing the SessionDataStore interface.\n\n */\nclass SessionDataStore {\n    constructor(sessionOptions) {\n        if (sessionOptions) {\n            const newSessionData = new sessionData_1.SessionData(sessionOptions);\n            this.setSessionData(newSessionData);\n        }\n    }\n    getSessionData() {\n        throw new Error('Abstract class');\n    }\n    /* eslint-disable */\n    setSessionData(session) {\n        throw new Error('Abstract class');\n    }\n    deleteSessionData() {\n        throw new Error('Abstract class');\n    }\n}\nexports.SessionDataStore = SessionDataStore;\n/**\n * Stores session data in the instance of this class.\n * @ignore\n */\nclass InstanceDataStore extends SessionDataStore {\n    constructor(sessionOptions) {\n        super(sessionOptions);\n        if (!this.sessionData) {\n            this.setSessionData(new sessionData_1.SessionData({}));\n        }\n    }\n    getSessionData() {\n        if (!this.sessionData) {\n            throw new errors_1.NoSessionDataError('No session data was found.');\n        }\n        return this.sessionData;\n    }\n    setSessionData(session) {\n        this.sessionData = session;\n        return true;\n    }\n    deleteSessionData() {\n        this.setSessionData(new sessionData_1.SessionData({}));\n        return true;\n    }\n}\nexports.InstanceDataStore = InstanceDataStore;\n/**\n * Stores session data in browser a localStorage entry.\n * @ignore\n */\nclass LocalStorageStore extends SessionDataStore {\n    constructor(sessionOptions) {\n        super(sessionOptions);\n        if (sessionOptions\n            && sessionOptions.storeOptions\n            && sessionOptions.storeOptions.localStorageKey\n            && (typeof sessionOptions.storeOptions.localStorageKey === 'string')) {\n            this.key = sessionOptions.storeOptions.localStorageKey;\n        }\n        else {\n            this.key = authConstants_1.LOCALSTORAGE_SESSION_KEY;\n        }\n        const data = localStorage.getItem(this.key);\n        if (!data) {\n            const sessionData = new sessionData_1.SessionData({});\n            this.setSessionData(sessionData);\n        }\n    }\n    getSessionData() {\n        const data = localStorage.getItem(this.key);\n        if (!data) {\n            throw new errors_1.NoSessionDataError('No session data was found in localStorage');\n        }\n        const dataJSON = JSON.parse(data);\n        return sessionData_1.SessionData.fromJSON(dataJSON);\n    }\n    setSessionData(session) {\n        localStorage.setItem(this.key, session.toString());\n        return true;\n    }\n    deleteSessionData() {\n        localStorage.removeItem(this.key);\n        this.setSessionData(new sessionData_1.SessionData({}));\n        return true;\n    }\n}\nexports.LocalStorageStore = LocalStorageStore;\n//# sourceMappingURL=sessionStore.js.map"]},"metadata":{},"sourceType":"script"}
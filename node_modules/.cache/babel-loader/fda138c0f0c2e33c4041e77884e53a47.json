{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *\n * @ignore\n */\n\nfunction containsValidProofStatement(searchText, name = null) {\n  if (!name) {\n    return false;\n  }\n\n  searchText = searchText.toLowerCase();\n\n  if (name.split('.').length < 2) {\n    throw new Error('Please provide the fully qualified Blockstack name.');\n  }\n\n  let username = null; // support legacy Blockstack ID proofs\n\n  if (name.endsWith('.id')) {\n    username = name.split('.id')[0];\n  }\n\n  const verificationStyles = username != null ? [`verifying myself: my bitcoin username is +${username}`, `verifying myself: my bitcoin username is ${username}`, `verifying myself: my openname is ${username}`, `verifying that +${username} is my bitcoin username`, `verifying that ${username} is my bitcoin username`, `verifying that ${username} is my openname`, `verifying that +${username} is my openname`, `verifying i am +${username} on my passcard`, `verifying that +${username} is my blockchain id`, `verifying that \"${name}\" is my blockstack id`, `verifying that ${name} is my blockstack id`, `verifying that &quot;${name}&quot; is my blockstack id`] : [`verifying that \"${name}\" is my blockstack id`, `verifying that ${name} is my blockstack id`, `verifying that &quot;${name}&quot; is my blockstack id`];\n\n  for (let i = 0; i < verificationStyles.length; i++) {\n    const verificationStyle = verificationStyles[i];\n\n    if (searchText.includes(verificationStyle)) {\n      return true;\n    }\n  }\n\n  if (username != null && searchText.includes('verifymyonename') && searchText.includes(`+${username}`)) {\n    return true;\n  }\n\n  return false;\n}\n\nexports.containsValidProofStatement = containsValidProofStatement;\n/**\n *\n * @ignore\n */\n\nfunction containsValidAddressProofStatement(proofStatement, address) {\n  proofStatement = proofStatement.split(address)[0].toLowerCase() + address;\n  const verificationStyles = [`verifying my blockstack id is secured with the address ${address}`];\n\n  for (let i = 0; i < verificationStyles.length; i++) {\n    const verificationStyle = verificationStyles[i];\n\n    if (proofStatement.includes(verificationStyle)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexports.containsValidAddressProofStatement = containsValidAddressProofStatement;","map":{"version":3,"sources":["../../../src/profiles/services/serviceUtils.ts"],"names":[],"mappings":";;;;;AAAA;;;;;AAIA,SAAgB,2BAAhB,CAA4C,UAA5C,EAAgE,IAAA,GAAsB,IAAtF,EAA0F;AACxF,MAAI,CAAC,IAAL,EAAW;AACT,WAAO,KAAP;AACD;;AAED,EAAA,UAAU,GAAG,UAAU,CAAC,WAAX,EAAb;;AAEA,MAAI,IAAI,CAAC,KAAL,CAAW,GAAX,EAAgB,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,UAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAED,MAAI,QAAQ,GAAG,IAAf,CAXwF,CAaxF;;AACA,MAAI,IAAI,CAAC,QAAL,CAAc,KAAd,CAAJ,EAA0B;AACxB,IAAA,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,KAAX,EAAkB,CAAlB,CAAX;AACD;;AAED,QAAM,kBAAkB,GAAG,QAAQ,IAAI,IAAZ,GAAmB,CAC5C,6CAA6C,QAAQ,EADT,EAE5C,4CAA4C,QAAQ,EAFR,EAG5C,oCAAoC,QAAQ,EAHA,EAI5C,mBAAmB,QAAQ,yBAJiB,EAK5C,kBAAkB,QAAQ,yBALkB,EAM5C,kBAAkB,QAAQ,iBANkB,EAO5C,mBAAmB,QAAQ,iBAPiB,EAQ5C,mBAAmB,QAAQ,iBARiB,EAS5C,mBAAmB,QAAQ,sBATiB,EAU5C,mBAAmB,IAAI,uBAVqB,EAW5C,kBAAkB,IAAI,sBAXsB,EAY5C,wBAAwB,IAAI,4BAZgB,CAAnB,GAavB,CACF,mBAAmB,IAAI,uBADrB,EAEF,kBAAkB,IAAI,sBAFpB,EAGF,wBAAwB,IAAI,4BAH1B,CAbJ;;AAmBA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,kBAAkB,CAAC,MAAvC,EAA+C,CAAC,EAAhD,EAAoD;AAClD,UAAM,iBAAiB,GAAG,kBAAkB,CAAC,CAAD,CAA5C;;AACA,QAAI,UAAU,CAAC,QAAX,CAAoB,iBAApB,CAAJ,EAA4C;AAC1C,aAAO,IAAP;AACD;AACF;;AAED,MAAI,QAAQ,IAAI,IAAZ,IACG,UAAU,CAAC,QAAX,CAAoB,iBAApB,CADH,IAEG,UAAU,CAAC,QAAX,CAAoB,IAAI,QAAQ,EAAhC,CAFP,EAE4C;AAC1C,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAnDD,OAAA,CAAA,2BAAA,GAAA,2BAAA;AAqDA;;;;;AAIA,SAAgB,kCAAhB,CAAmD,cAAnD,EAA2E,OAA3E,EAA0F;AACxF,EAAA,cAAc,GAAG,cAAc,CAAC,KAAf,CAAqB,OAArB,EAA8B,CAA9B,EAAiC,WAAjC,KAAiD,OAAlE;AAEA,QAAM,kBAAkB,GAAG,CACzB,0DAA0D,OAAO,EADxC,CAA3B;;AAIA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,kBAAkB,CAAC,MAAvC,EAA+C,CAAC,EAAhD,EAAoD;AAClD,UAAM,iBAAiB,GAAG,kBAAkB,CAAC,CAAD,CAA5C;;AACA,QAAI,cAAc,CAAC,QAAf,CAAwB,iBAAxB,CAAJ,EAAgD;AAC9C,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD;;AAfD,OAAA,CAAA,kCAAA,GAAA,kCAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n *\n * @ignore\n */\nfunction containsValidProofStatement(searchText, name = null) {\n    if (!name) {\n        return false;\n    }\n    searchText = searchText.toLowerCase();\n    if (name.split('.').length < 2) {\n        throw new Error('Please provide the fully qualified Blockstack name.');\n    }\n    let username = null;\n    // support legacy Blockstack ID proofs\n    if (name.endsWith('.id')) {\n        username = name.split('.id')[0];\n    }\n    const verificationStyles = username != null ? [\n        `verifying myself: my bitcoin username is +${username}`,\n        `verifying myself: my bitcoin username is ${username}`,\n        `verifying myself: my openname is ${username}`,\n        `verifying that +${username} is my bitcoin username`,\n        `verifying that ${username} is my bitcoin username`,\n        `verifying that ${username} is my openname`,\n        `verifying that +${username} is my openname`,\n        `verifying i am +${username} on my passcard`,\n        `verifying that +${username} is my blockchain id`,\n        `verifying that \"${name}\" is my blockstack id`,\n        `verifying that ${name} is my blockstack id`,\n        `verifying that &quot;${name}&quot; is my blockstack id`\n    ] : [\n        `verifying that \"${name}\" is my blockstack id`,\n        `verifying that ${name} is my blockstack id`,\n        `verifying that &quot;${name}&quot; is my blockstack id`\n    ];\n    for (let i = 0; i < verificationStyles.length; i++) {\n        const verificationStyle = verificationStyles[i];\n        if (searchText.includes(verificationStyle)) {\n            return true;\n        }\n    }\n    if (username != null\n        && searchText.includes('verifymyonename')\n        && searchText.includes(`+${username}`)) {\n        return true;\n    }\n    return false;\n}\nexports.containsValidProofStatement = containsValidProofStatement;\n/**\n *\n * @ignore\n */\nfunction containsValidAddressProofStatement(proofStatement, address) {\n    proofStatement = proofStatement.split(address)[0].toLowerCase() + address;\n    const verificationStyles = [\n        `verifying my blockstack id is secured with the address ${address}`\n    ];\n    for (let i = 0; i < verificationStyles.length; i++) {\n        const verificationStyle = verificationStyles[i];\n        if (proofStatement.includes(verificationStyle)) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.containsValidAddressProofStatement = containsValidAddressProofStatement;\n//# sourceMappingURL=serviceUtils.js.map"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst services_1 = require(\"./services\");\n/**\n * Validates the social proofs in a user's profile. Currently supports validation of\n * Facebook, Twitter, GitHub, Instagram, LinkedIn and HackerNews accounts.\n *\n * @param {Object} profile The JSON of the profile to be validated\n * @param {string} ownerAddress The owner bitcoin address to be validated\n * @param {string} [name=null] The Blockstack name to be validated\n * @returns {Promise} that resolves to an array of validated proof objects\n */\n\n\nfunction validateProofs(profile, ownerAddress, cheerio, name = null) {\n  if (!profile) {\n    throw new Error('Profile must not be null');\n  }\n\n  let accounts = [];\n  const proofsToValidate = [];\n\n  if (profile.hasOwnProperty('account')) {\n    accounts = profile.account;\n  } else {\n    return Promise.resolve([]);\n  }\n\n  accounts.forEach(account => {\n    // skip if proof service is not supported\n    if (account.hasOwnProperty('service') && !services_1.profileServices.hasOwnProperty(account.service)) {\n      return;\n    }\n\n    if (!(account.hasOwnProperty('proofType') && account.proofType === 'http' && account.hasOwnProperty('proofUrl'))) {\n      return;\n    }\n\n    const proof = {\n      service: account.service,\n      proof_url: account.proof_url || account.proofUrl,\n      identifier: account.identifier,\n      valid: false\n    };\n    proofsToValidate.push(services_1.profileServices[account.service].validateProof(proof, ownerAddress, cheerio, name));\n  });\n  return Promise.all(proofsToValidate);\n}\n\nexports.validateProofs = validateProofs;","map":{"version":3,"sources":["../../src/profiles/profileProofs.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAUA;;;;;;;;;;;AASA,SAAgB,cAAhB,CAA+B,OAA/B,EAC+B,YAD/B,EAE+B,OAF/B,EAG+B,IAAA,GAAe,IAH9C,EAGkD;AAChD,MAAI,CAAC,OAAL,EAAc;AACZ,UAAM,IAAI,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAED,MAAI,QAAQ,GAAU,EAAtB;AACA,QAAM,gBAAgB,GAAgC,EAAtD;;AAEA,MAAI,OAAO,CAAC,cAAR,CAAuB,SAAvB,CAAJ,EAAuC;AACrC,IAAA,QAAQ,GAAG,OAAO,CAAC,OAAnB;AACD,GAFD,MAEO;AACL,WAAO,OAAO,CAAC,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAED,EAAA,QAAQ,CAAC,OAAT,CAAkB,OAAD,IAAY;AAC3B;AACA,QAAI,OAAO,CAAC,cAAR,CAAuB,SAAvB,KACG,CAAC,UAAA,CAAA,eAAA,CAAgB,cAAhB,CAA+B,OAAO,CAAC,OAAvC,CADR,EACyD;AACvD;AACD;;AAED,QAAI,EAAE,OAAO,CAAC,cAAR,CAAuB,WAAvB,KACC,OAAO,CAAC,SAAR,KAAsB,MADvB,IAEC,OAAO,CAAC,cAAR,CAAuB,UAAvB,CAFH,CAAJ,EAE4C;AAC1C;AACD;;AAED,UAAM,KAAK,GAAqB;AAC9B,MAAA,OAAO,EAAE,OAAO,CAAC,OADa;AAE9B,MAAA,SAAS,EAAE,OAAO,CAAC,SAAR,IAAqB,OAAO,CAAC,QAFV;AAG9B,MAAA,UAAU,EAAE,OAAO,CAAC,UAHU;AAI9B,MAAA,KAAK,EAAE;AAJuB,KAAhC;AAOA,IAAA,gBAAgB,CAAC,IAAjB,CAAsB,UAAA,CAAA,eAAA,CAAgB,OAAO,CAAC,OAAxB,EACnB,aADmB,CACL,KADK,EACE,YADF,EACgB,OADhB,EACyB,IADzB,CAAtB;AAED,GAtBD;AAwBA,SAAO,OAAO,CAAC,GAAR,CAAY,gBAAZ,CAAP;AACD;;AA1CD,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst services_1 = require(\"./services\");\n/**\n * Validates the social proofs in a user's profile. Currently supports validation of\n * Facebook, Twitter, GitHub, Instagram, LinkedIn and HackerNews accounts.\n *\n * @param {Object} profile The JSON of the profile to be validated\n * @param {string} ownerAddress The owner bitcoin address to be validated\n * @param {string} [name=null] The Blockstack name to be validated\n * @returns {Promise} that resolves to an array of validated proof objects\n */\nfunction validateProofs(profile, ownerAddress, cheerio, name = null) {\n    if (!profile) {\n        throw new Error('Profile must not be null');\n    }\n    let accounts = [];\n    const proofsToValidate = [];\n    if (profile.hasOwnProperty('account')) {\n        accounts = profile.account;\n    }\n    else {\n        return Promise.resolve([]);\n    }\n    accounts.forEach((account) => {\n        // skip if proof service is not supported\n        if (account.hasOwnProperty('service')\n            && !services_1.profileServices.hasOwnProperty(account.service)) {\n            return;\n        }\n        if (!(account.hasOwnProperty('proofType')\n            && account.proofType === 'http'\n            && account.hasOwnProperty('proofUrl'))) {\n            return;\n        }\n        const proof = {\n            service: account.service,\n            proof_url: account.proof_url || account.proofUrl,\n            identifier: account.identifier,\n            valid: false\n        };\n        proofsToValidate.push(services_1.profileServices[account.service]\n            .validateProof(proof, ownerAddress, cheerio, name));\n    });\n    return Promise.all(proofsToValidate);\n}\nexports.validateProofs = validateProofs;\n//# sourceMappingURL=profileProofs.js.map"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst base64url_1 = __importDefault(require(\"base64url\"));\n\nfunction decodeToken(token) {\n  if (typeof token === 'string') {\n    // decompose the token into parts\n    const tokenParts = token.split('.');\n    const header = JSON.parse(base64url_1.default.decode(tokenParts[0]));\n    const payload = JSON.parse(base64url_1.default.decode(tokenParts[1]));\n    const signature = tokenParts[2]; // return the token object\n\n    return {\n      header: header,\n      payload: payload,\n      signature: signature\n    };\n  } else if (typeof token === 'object') {\n    if (typeof token.payload !== 'string') {\n      throw new Error('Expected token payload to be a base64 or json string');\n    }\n\n    let payload = token.payload;\n\n    if (token.payload[0] !== '{') {\n      payload = base64url_1.default.decode(payload);\n    }\n\n    const allHeaders = [];\n    token.header.map(headerValue => {\n      const header = JSON.parse(base64url_1.default.decode(headerValue));\n      allHeaders.push(header);\n    });\n    return {\n      header: allHeaders,\n      payload: JSON.parse(payload),\n      signature: token.signature\n    };\n  }\n}\n\nexports.decodeToken = decodeToken;","map":{"version":3,"sources":["decode.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAA,WAAA,GAAA,eAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AAkBA,SAAgB,WAAhB,CAA4B,KAA5B,EAA0D;AACtD,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC3B;AACA,UAAM,UAAU,GAAG,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAnB;AACA,UAAM,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,WAAA,CAAA,OAAA,CAAU,MAAV,CAAiB,UAAU,CAAC,CAAD,CAA3B,CAAX,CAAf;AACA,UAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,WAAA,CAAA,OAAA,CAAU,MAAV,CAAiB,UAAU,CAAC,CAAD,CAA3B,CAAX,CAAhB;AACA,UAAM,SAAS,GAAG,UAAU,CAAC,CAAD,CAA5B,CAL2B,CAO3B;;AACA,WAAO;AACH,MAAA,MAAM,EAAE,MADL;AAEH,MAAA,OAAO,EAAE,OAFN;AAGH,MAAA,SAAS,EAAE;AAHR,KAAP;AAKH,GAbD,MAaO,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAClC,QAAI,OAAO,KAAK,CAAC,OAAb,KAAyB,QAA7B,EAAuC;AACnC,YAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;AACH;;AACD,QAAI,OAAO,GAAG,KAAK,CAAC,OAApB;;AACA,QAAI,KAAK,CAAC,OAAN,CAAc,CAAd,MAAqB,GAAzB,EAA8B;AAC1B,MAAA,OAAO,GAAG,WAAA,CAAA,OAAA,CAAU,MAAV,CAAiB,OAAjB,CAAV;AACH;;AAED,UAAM,UAAU,GAAU,EAA1B;AACA,IAAA,KAAK,CAAC,MAAN,CAAa,GAAb,CAAkB,WAAD,IAAwB;AACrC,YAAM,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,WAAA,CAAA,OAAA,CAAU,MAAV,CAAiB,WAAjB,CAAX,CAAf;AACA,MAAA,UAAU,CAAC,IAAX,CAAgB,MAAhB;AACH,KAHD;AAKA,WAAO;AACH,MAAA,MAAM,EAAE,UADL;AAEH,MAAA,OAAO,EAAE,IAAI,CAAC,KAAL,CAAW,OAAX,CAFN;AAGH,MAAA,SAAS,EAAE,KAAK,CAAC;AAHd,KAAP;AAKH;AACJ;;AAnCD,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"./","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base64url_1 = __importDefault(require(\"base64url\"));\nfunction decodeToken(token) {\n    if (typeof token === 'string') {\n        // decompose the token into parts\n        const tokenParts = token.split('.');\n        const header = JSON.parse(base64url_1.default.decode(tokenParts[0]));\n        const payload = JSON.parse(base64url_1.default.decode(tokenParts[1]));\n        const signature = tokenParts[2];\n        // return the token object\n        return {\n            header: header,\n            payload: payload,\n            signature: signature\n        };\n    }\n    else if (typeof token === 'object') {\n        if (typeof token.payload !== 'string') {\n            throw new Error('Expected token payload to be a base64 or json string');\n        }\n        let payload = token.payload;\n        if (token.payload[0] !== '{') {\n            payload = base64url_1.default.decode(payload);\n        }\n        const allHeaders = [];\n        token.header.map((headerValue) => {\n            const header = JSON.parse(base64url_1.default.decode(headerValue));\n            allHeaders.push(header);\n        });\n        return {\n            header: allHeaders,\n            payload: JSON.parse(payload),\n            signature: token.signature\n        };\n    }\n}\nexports.decodeToken = decodeToken;\n//# sourceMappingURL=decode.js.map"]},"metadata":{},"sourceType":"script"}
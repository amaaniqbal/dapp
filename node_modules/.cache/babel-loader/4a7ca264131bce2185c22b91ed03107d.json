{"ast":null,"code":"// Extracted from https://github.com/crypto-browserify/ripemd160\nconst ARRAY16 = new Array(16);\nconst zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\nconst zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\nconst sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\nconst sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\nconst hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];\nconst hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];\n\nfunction rotl(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction fn1(a, b, c, d, e, m, k, s) {\n  return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;\n}\n\nfunction fn2(a, b, c, d, e, m, k, s) {\n  return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;\n}\n\nfunction fn3(a, b, c, d, e, m, k, s) {\n  return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;\n}\n\nfunction fn4(a, b, c, d, e, m, k, s) {\n  return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;\n}\n\nfunction fn5(a, b, c, d, e, m, k, s) {\n  return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;\n}\n\nfunction readInt32LE(buffer, offset) {\n  offset >>>= 0;\n  return buffer[offset] | buffer[offset + 1] << 8 | buffer[offset + 2] << 16 | buffer[offset + 3] << 24;\n}\n\nfunction writeUInt32LE(buffer, value, offset) {\n  value = +value;\n  offset >>>= 0;\n  buffer[offset + 3] = value >>> 24;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset] = value & 0xff;\n  return offset + 4;\n}\n\nfunction writeInt32LE(buffer, value, offset) {\n  value = +value;\n  offset >>>= 0;\n  buffer[offset] = value & 0xff;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n  return offset + 4;\n}\n\nfunction createArray(size) {\n  if (typeof Uint8Array !== 'undefined') {\n    return new Uint8Array(size);\n  } else {\n    return new Array(size);\n  }\n}\n\nexport default class RIPEMD160 {\n  constructor() {\n    this._block = createArray(64);\n    this._blockSize = 64;\n    this._blockOffset = 0;\n    this._length = [0, 0, 0, 0];\n    this._finalized = false;\n    this._a = 0x67452301;\n    this._b = 0xefcdab89;\n    this._c = 0x98badcfe;\n    this._d = 0x10325476;\n    this._e = 0xc3d2e1f0;\n  }\n\n  update(data) {\n    if (this._finalized) throw new Error('Digest already called'); // consume data\n\n    const block = this._block;\n    let offset = 0;\n\n    while (this._blockOffset + data.length - offset >= this._blockSize) {\n      for (let i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];\n\n      this._update();\n\n      this._blockOffset = 0;\n    }\n\n    while (offset < data.length) block[this._blockOffset++] = data[offset++]; // update length\n\n\n    for (let j = 0, carry = data.length * 8; carry > 0; ++j) {\n      this._length[j] += carry;\n      carry = this._length[j] / 0x0100000000 | 0;\n      if (carry > 0) this._length[j] -= 0x0100000000 * carry;\n    }\n\n    return this;\n  }\n\n  _update() {\n    const words = ARRAY16;\n\n    for (let j = 0; j < 16; ++j) {\n      words[j] = readInt32LE(this._block, j * 4);\n    }\n\n    let al = this._a | 0;\n    let bl = this._b | 0;\n    let cl = this._c | 0;\n    let dl = this._d | 0;\n    let el = this._e | 0;\n    let ar = this._a | 0;\n    let br = this._b | 0;\n    let cr = this._c | 0;\n    let dr = this._d | 0;\n    let er = this._e | 0; // computation\n\n    for (let i = 0; i < 80; i += 1) {\n      let tl;\n      let tr;\n\n      if (i < 16) {\n        tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);\n        tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);\n      } else if (i < 32) {\n        tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);\n        tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);\n      } else if (i < 48) {\n        tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);\n        tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);\n      } else if (i < 64) {\n        tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);\n        tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);\n      } else {\n        // if (i<80) {\n        tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);\n        tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);\n      }\n\n      al = el;\n      el = dl;\n      dl = rotl(cl, 10);\n      cl = bl;\n      bl = tl;\n      ar = er;\n      er = dr;\n      dr = rotl(cr, 10);\n      cr = br;\n      br = tr;\n    } // update state\n\n\n    const t = this._b + cl + dr | 0;\n    this._b = this._c + dl + er | 0;\n    this._c = this._d + el + ar | 0;\n    this._d = this._e + al + br | 0;\n    this._e = this._a + bl + cr | 0;\n    this._a = t;\n  }\n\n  digest() {\n    if (this._finalized) {\n      throw new Error('Digest already called');\n    }\n\n    this._finalized = true; // create padding and handle blocks\n\n    this._block[this._blockOffset++] = 0x80;\n\n    if (this._blockOffset > 56) {\n      this._block.fill(0, this._blockOffset, 64);\n\n      this._update();\n\n      this._blockOffset = 0;\n    }\n\n    this._block.fill(0, this._blockOffset, 56);\n\n    writeUInt32LE(this._block, this._length[0], 56);\n    writeUInt32LE(this._block, this._length[1], 60);\n\n    this._update(); // produce result\n\n\n    const buffer = createArray(20);\n    writeInt32LE(buffer, this._a, 0);\n    writeInt32LE(buffer, this._b, 4);\n    writeInt32LE(buffer, this._c, 8);\n    writeInt32LE(buffer, this._d, 12);\n    writeInt32LE(buffer, this._e, 16); // reset state\n\n    this._block.fill(0);\n\n    this._blockOffset = 0;\n\n    for (let i = 0; i < 4; ++i) {\n      this._length[i] = 0;\n    }\n\n    return buffer;\n  }\n\n}","map":{"version":3,"sources":["/home/os/Desktop/hello-world-tutorial/node_modules/ripemd160-min/dist-esm/index.js"],"names":["ARRAY16","Array","zl","zr","sl","sr","hl","hr","rotl","x","n","fn1","a","b","c","d","e","m","k","s","fn2","fn3","fn4","fn5","readInt32LE","buffer","offset","writeUInt32LE","value","writeInt32LE","createArray","size","Uint8Array","RIPEMD160","constructor","_block","_blockSize","_blockOffset","_length","_finalized","_a","_b","_c","_d","_e","update","data","Error","block","length","i","_update","j","carry","words","al","bl","cl","dl","el","ar","br","cr","dr","er","tl","tr","t","digest","fill"],"mappings":"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","sourcesContent":["// Extracted from https://github.com/crypto-browserify/ripemd160\nconst ARRAY16 = new Array(16);\nconst zl = [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\nconst zr = [\n    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\nconst sl = [\n    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\nconst sr = [\n    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\nconst hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];\nconst hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];\nfunction rotl(x, n) {\n    return (x << n) | (x >>> (32 - n));\n}\nfunction fn1(a, b, c, d, e, m, k, s) {\n    return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0;\n}\nfunction fn2(a, b, c, d, e, m, k, s) {\n    return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0;\n}\nfunction fn3(a, b, c, d, e, m, k, s) {\n    return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0;\n}\nfunction fn4(a, b, c, d, e, m, k, s) {\n    return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0;\n}\nfunction fn5(a, b, c, d, e, m, k, s) {\n    return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0;\n}\nfunction readInt32LE(buffer, offset) {\n    offset >>>= 0;\n    return (buffer[offset])\n        | (buffer[offset + 1] << 8)\n        | (buffer[offset + 2] << 16)\n        | (buffer[offset + 3] << 24);\n}\nfunction writeUInt32LE(buffer, value, offset) {\n    value = +value;\n    offset >>>= 0;\n    buffer[offset + 3] = (value >>> 24);\n    buffer[offset + 2] = (value >>> 16);\n    buffer[offset + 1] = (value >>> 8);\n    buffer[offset] = (value & 0xff);\n    return offset + 4;\n}\nfunction writeInt32LE(buffer, value, offset) {\n    value = +value;\n    offset >>>= 0;\n    buffer[offset] = (value & 0xff);\n    buffer[offset + 1] = (value >>> 8);\n    buffer[offset + 2] = (value >>> 16);\n    buffer[offset + 3] = (value >>> 24);\n    return offset + 4;\n}\nfunction createArray(size) {\n    if (typeof Uint8Array !== 'undefined') {\n        return new Uint8Array(size);\n    }\n    else {\n        return new Array(size);\n    }\n}\nexport default class RIPEMD160 {\n    constructor() {\n        this._block = createArray(64);\n        this._blockSize = 64;\n        this._blockOffset = 0;\n        this._length = [0, 0, 0, 0];\n        this._finalized = false;\n        this._a = 0x67452301;\n        this._b = 0xefcdab89;\n        this._c = 0x98badcfe;\n        this._d = 0x10325476;\n        this._e = 0xc3d2e1f0;\n    }\n    update(data) {\n        if (this._finalized)\n            throw new Error('Digest already called');\n        // consume data\n        const block = this._block;\n        let offset = 0;\n        while (this._blockOffset + data.length - offset >= this._blockSize) {\n            for (let i = this._blockOffset; i < this._blockSize;)\n                block[i++] = data[offset++];\n            this._update();\n            this._blockOffset = 0;\n        }\n        while (offset < data.length)\n            block[this._blockOffset++] = data[offset++];\n        // update length\n        for (let j = 0, carry = data.length * 8; carry > 0; ++j) {\n            this._length[j] += carry;\n            carry = (this._length[j] / 0x0100000000) | 0;\n            if (carry > 0)\n                this._length[j] -= 0x0100000000 * carry;\n        }\n        return this;\n    }\n    _update() {\n        const words = ARRAY16;\n        for (let j = 0; j < 16; ++j) {\n            words[j] = readInt32LE(this._block, j * 4);\n        }\n        let al = this._a | 0;\n        let bl = this._b | 0;\n        let cl = this._c | 0;\n        let dl = this._d | 0;\n        let el = this._e | 0;\n        let ar = this._a | 0;\n        let br = this._b | 0;\n        let cr = this._c | 0;\n        let dr = this._d | 0;\n        let er = this._e | 0;\n        // computation\n        for (let i = 0; i < 80; i += 1) {\n            let tl;\n            let tr;\n            if (i < 16) {\n                tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);\n                tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);\n            }\n            else if (i < 32) {\n                tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);\n                tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);\n            }\n            else if (i < 48) {\n                tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);\n                tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);\n            }\n            else if (i < 64) {\n                tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);\n                tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);\n            }\n            else { // if (i<80) {\n                tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);\n                tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);\n            }\n            al = el;\n            el = dl;\n            dl = rotl(cl, 10);\n            cl = bl;\n            bl = tl;\n            ar = er;\n            er = dr;\n            dr = rotl(cr, 10);\n            cr = br;\n            br = tr;\n        }\n        // update state\n        const t = (this._b + cl + dr) | 0;\n        this._b = (this._c + dl + er) | 0;\n        this._c = (this._d + el + ar) | 0;\n        this._d = (this._e + al + br) | 0;\n        this._e = (this._a + bl + cr) | 0;\n        this._a = t;\n    }\n    digest() {\n        if (this._finalized) {\n            throw new Error('Digest already called');\n        }\n        this._finalized = true;\n        // create padding and handle blocks\n        this._block[this._blockOffset++] = 0x80;\n        if (this._blockOffset > 56) {\n            this._block.fill(0, this._blockOffset, 64);\n            this._update();\n            this._blockOffset = 0;\n        }\n        this._block.fill(0, this._blockOffset, 56);\n        writeUInt32LE(this._block, this._length[0], 56);\n        writeUInt32LE(this._block, this._length[1], 60);\n        this._update();\n        // produce result\n        const buffer = createArray(20);\n        writeInt32LE(buffer, this._a, 0);\n        writeInt32LE(buffer, this._b, 4);\n        writeInt32LE(buffer, this._c, 8);\n        writeInt32LE(buffer, this._d, 12);\n        writeInt32LE(buffer, this._e, 16);\n        // reset state\n        this._block.fill(0);\n        this._blockOffset = 0;\n        for (let i = 0; i < 4; ++i) {\n            this._length[i] = 0;\n        }\n        return buffer;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
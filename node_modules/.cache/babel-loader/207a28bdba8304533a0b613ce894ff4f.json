{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst service_1 = require(\"./service\");\n\nclass Github extends service_1.Service {\n  getBaseUrls() {\n    const baseUrls = ['https://gist.github.com/', 'http://gist.github.com', 'gist.github.com'];\n    return baseUrls;\n  }\n\n  normalizeUrl(_proof) {\n    return '';\n  }\n\n  getProofUrl(proof) {\n    const baseUrls = this.getBaseUrls();\n    let proofUrl = proof.proof_url.toLowerCase();\n    proofUrl = super.prefixScheme(proofUrl);\n\n    for (let i = 0; i < baseUrls.length; i++) {\n      const requiredPrefix = `${baseUrls[i]}${proof.identifier}`.toLowerCase();\n\n      if (proofUrl.startsWith(requiredPrefix)) {\n        const raw = proofUrl.endsWith('/') ? 'raw' : '/raw';\n        return `${proofUrl}${raw}`;\n      }\n    }\n\n    throw new Error(`Proof url ${proof.proof_url} is not valid for service ${proof.service}`);\n  }\n\n  getProofStatement(searchText, _cheerio) {\n    return searchText;\n  }\n\n}\n\nexports.Github = Github;","map":{"version":3,"sources":["../../../src/profiles/services/github.ts"],"names":[],"mappings":";;;;;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAGA,MAAM,MAAN,SAAqB,SAAA,CAAA,OAArB,CAA4B;AAC1B,EAAA,WAAW,GAAA;AACT,UAAM,QAAQ,GAAG,CAAC,0BAAD,EAA6B,wBAA7B,EAAuD,iBAAvD,CAAjB;AACA,WAAO,QAAP;AACD;;AAED,EAAA,YAAY,CAAC,MAAD,EAAyB;AACnC,WAAO,EAAP;AACD;;AAED,EAAA,WAAW,CAAC,KAAD,EAAwB;AACjC,UAAM,QAAQ,GAAG,KAAK,WAAL,EAAjB;AACA,QAAI,QAAQ,GAAG,KAAK,CAAC,SAAN,CAAgB,WAAhB,EAAf;AAEA,IAAA,QAAQ,GAAG,MAAM,YAAN,CAAmB,QAAnB,CAAX;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,YAAM,cAAc,GAAG,GAAG,QAAQ,CAAC,CAAD,CAAG,GAAG,KAAK,CAAC,UAAU,EAAjC,CAAoC,WAApC,EAAvB;;AACA,UAAI,QAAQ,CAAC,UAAT,CAAoB,cAApB,CAAJ,EAAyC;AACvC,cAAM,GAAG,GAAG,QAAQ,CAAC,QAAT,CAAkB,GAAlB,IAAyB,KAAzB,GAAiC,MAA7C;AACA,eAAO,GAAG,QAAQ,GAAG,GAAG,EAAxB;AACD;AACF;;AACD,UAAM,IAAI,KAAJ,CAAU,aAAa,KAAK,CAAC,SAAS,6BAA6B,KAAK,CAAC,OAAO,EAAhF,CAAN;AACD;;AAED,EAAA,iBAAiB,CAAC,UAAD,EAAqB,QAArB,EAAgD;AAC/D,WAAO,UAAP;AACD;;AA5ByB;;AA+BnB,OAAA,CAAA,MAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst service_1 = require(\"./service\");\nclass Github extends service_1.Service {\n    getBaseUrls() {\n        const baseUrls = ['https://gist.github.com/', 'http://gist.github.com', 'gist.github.com'];\n        return baseUrls;\n    }\n    normalizeUrl(_proof) {\n        return '';\n    }\n    getProofUrl(proof) {\n        const baseUrls = this.getBaseUrls();\n        let proofUrl = proof.proof_url.toLowerCase();\n        proofUrl = super.prefixScheme(proofUrl);\n        for (let i = 0; i < baseUrls.length; i++) {\n            const requiredPrefix = `${baseUrls[i]}${proof.identifier}`.toLowerCase();\n            if (proofUrl.startsWith(requiredPrefix)) {\n                const raw = proofUrl.endsWith('/') ? 'raw' : '/raw';\n                return `${proofUrl}${raw}`;\n            }\n        }\n        throw new Error(`Proof url ${proof.proof_url} is not valid for service ${proof.service}`);\n    }\n    getProofStatement(searchText, _cheerio) {\n        return searchText;\n    }\n}\nexports.Github = Github;\n//# sourceMappingURL=github.js.map"]},"metadata":{},"sourceType":"script"}
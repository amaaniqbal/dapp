{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *\n * @param serviceName\n * @param data\n *\n * @ignore\n */\n\nfunction formatAccount(serviceName, data) {\n  let proofUrl;\n\n  if (data.proof && data.proof.url) {\n    proofUrl = data.proof.url;\n  }\n\n  return {\n    '@type': 'Account',\n    service: serviceName,\n    identifier: data.username,\n    proofType: 'http',\n    proofUrl\n  };\n}\n/**\n *\n * @param profile\n *\n * @ignore\n */\n\n\nfunction getPersonFromLegacyFormat(profile) {\n  const profileData = {\n    '@type': 'Person'\n  };\n\n  if (profile) {\n    if (profile.name && profile.name.formatted) {\n      profileData.name = profile.name.formatted;\n    }\n\n    if (profile.bio) {\n      profileData.description = profile.bio;\n    }\n\n    if (profile.location && profile.location.formatted) {\n      profileData.address = {\n        '@type': 'PostalAddress',\n        addressLocality: profile.location.formatted\n      };\n    }\n\n    const images = [];\n\n    if (profile.avatar && profile.avatar.url) {\n      images.push({\n        '@type': 'ImageObject',\n        name: 'avatar',\n        contentUrl: profile.avatar.url\n      });\n    }\n\n    if (profile.cover && profile.cover.url) {\n      images.push({\n        '@type': 'ImageObject',\n        name: 'cover',\n        contentUrl: profile.cover.url\n      });\n    }\n\n    if (images.length) {\n      profileData.image = images;\n    }\n\n    if (profile.website) {\n      profileData.website = [{\n        '@type': 'WebSite',\n        url: profile.website\n      }];\n    }\n\n    const accounts = [];\n\n    if (profile.bitcoin && profile.bitcoin.address) {\n      accounts.push({\n        '@type': 'Account',\n        role: 'payment',\n        service: 'bitcoin',\n        identifier: profile.bitcoin.address\n      });\n    }\n\n    if (profile.twitter && profile.twitter.username) {\n      accounts.push(formatAccount('twitter', profile.twitter));\n    }\n\n    if (profile.facebook && profile.facebook.username) {\n      accounts.push(formatAccount('facebook', profile.facebook));\n    }\n\n    if (profile.github && profile.github.username) {\n      accounts.push(formatAccount('github', profile.github));\n    }\n\n    if (profile.auth) {\n      if (profile.auth.length > 0) {\n        if (profile.auth[0] && profile.auth[0].publicKeychain) {\n          accounts.push({\n            '@type': 'Account',\n            role: 'key',\n            service: 'bip32',\n            identifier: profile.auth[0].publicKeychain\n          });\n        }\n      }\n    }\n\n    if (profile.pgp && profile.pgp.url) {\n      accounts.push({\n        '@type': 'Account',\n        role: 'key',\n        service: 'pgp',\n        identifier: profile.pgp.fingerprint,\n        contentUrl: profile.pgp.url\n      });\n    }\n\n    profileData.account = accounts;\n  }\n\n  return profileData;\n}\n\nexports.getPersonFromLegacyFormat = getPersonFromLegacyFormat;","map":{"version":3,"sources":["../../../src/profiles/profileSchemas/personLegacy.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n *\n * @param serviceName\n * @param data\n *\n * @ignore\n */\nfunction formatAccount(serviceName, data) {\n    let proofUrl;\n    if (data.proof && data.proof.url) {\n        proofUrl = data.proof.url;\n    }\n    return {\n        '@type': 'Account',\n        service: serviceName,\n        identifier: data.username,\n        proofType: 'http',\n        proofUrl\n    };\n}\n/**\n *\n * @param profile\n *\n * @ignore\n */\nfunction getPersonFromLegacyFormat(profile) {\n    const profileData = {\n        '@type': 'Person'\n    };\n    if (profile) {\n        if (profile.name && profile.name.formatted) {\n            profileData.name = profile.name.formatted;\n        }\n        if (profile.bio) {\n            profileData.description = profile.bio;\n        }\n        if (profile.location && profile.location.formatted) {\n            profileData.address = {\n                '@type': 'PostalAddress',\n                addressLocality: profile.location.formatted\n            };\n        }\n        const images = [];\n        if (profile.avatar && profile.avatar.url) {\n            images.push({\n                '@type': 'ImageObject',\n                name: 'avatar',\n                contentUrl: profile.avatar.url\n            });\n        }\n        if (profile.cover && profile.cover.url) {\n            images.push({\n                '@type': 'ImageObject',\n                name: 'cover',\n                contentUrl: profile.cover.url\n            });\n        }\n        if (images.length) {\n            profileData.image = images;\n        }\n        if (profile.website) {\n            profileData.website = [{\n                    '@type': 'WebSite',\n                    url: profile.website\n                }];\n        }\n        const accounts = [];\n        if (profile.bitcoin && profile.bitcoin.address) {\n            accounts.push({\n                '@type': 'Account',\n                role: 'payment',\n                service: 'bitcoin',\n                identifier: profile.bitcoin.address\n            });\n        }\n        if (profile.twitter && profile.twitter.username) {\n            accounts.push(formatAccount('twitter', profile.twitter));\n        }\n        if (profile.facebook && profile.facebook.username) {\n            accounts.push(formatAccount('facebook', profile.facebook));\n        }\n        if (profile.github && profile.github.username) {\n            accounts.push(formatAccount('github', profile.github));\n        }\n        if (profile.auth) {\n            if (profile.auth.length > 0) {\n                if (profile.auth[0] && profile.auth[0].publicKeychain) {\n                    accounts.push({\n                        '@type': 'Account',\n                        role: 'key',\n                        service: 'bip32',\n                        identifier: profile.auth[0].publicKeychain\n                    });\n                }\n            }\n        }\n        if (profile.pgp && profile.pgp.url) {\n            accounts.push({\n                '@type': 'Account',\n                role: 'key',\n                service: 'pgp',\n                identifier: profile.pgp.fingerprint,\n                contentUrl: profile.pgp.url\n            });\n        }\n        profileData.account = accounts;\n    }\n    return profileData;\n}\nexports.getPersonFromLegacyFormat = getPersonFromLegacyFormat;\n//# sourceMappingURL=personLegacy.js.map"]},"metadata":{},"sourceType":"script"}
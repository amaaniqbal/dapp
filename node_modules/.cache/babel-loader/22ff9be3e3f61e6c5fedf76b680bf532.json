{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst service_1 = require(\"./service\");\n\nclass LinkedIn extends service_1.Service {\n  getBaseUrls() {\n    const baseUrls = ['https://www.linkedin.com/feed/update/', 'http://www.linkedin.com/feed/update/', 'www.linkedin.com/feed/update/'];\n    return baseUrls;\n  }\n\n  getProofUrl(proof) {\n    const baseUrls = this.getBaseUrls();\n    let proofUrl = proof.proof_url.toLowerCase();\n    proofUrl = super.prefixScheme(proofUrl);\n\n    for (let i = 0; i < baseUrls.length; i++) {\n      if (proofUrl.startsWith(`${baseUrls[i]}`)) {\n        return proofUrl;\n      }\n    }\n\n    throw new Error(`Proof url ${proof.proof_url} is not valid for service ${proof.service}`);\n  }\n\n  normalizeUrl(_proof) {\n    return '';\n  }\n\n  shouldValidateIdentityInBody() {\n    return true;\n  }\n\n  getProofIdentity(searchText, cheerio) {\n    const $ = cheerio.load(searchText);\n    const profileLink = $('body > main header a');\n\n    if (profileLink !== undefined) {\n      if (profileLink.attr('href') === undefined) {\n        return '';\n      }\n\n      const url = profileLink.attr('href'); // Parse URL for identifier\n\n      const identifier = url.split('?').shift().split('/').pop();\n      return identifier;\n    } else {\n      return '';\n    }\n  }\n\n  getProofStatement(searchText, cheerio) {\n    const $ = cheerio.load(searchText);\n    const postContent = $('head > meta[property=\"og:title\"]');\n    let statement = '';\n\n    if (postContent !== undefined) {\n      statement = postContent.attr('content');\n    }\n\n    return statement;\n  }\n\n}\n\nexports.LinkedIn = LinkedIn;","map":{"version":3,"sources":["../../../src/profiles/services/linkedIn.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAGA,MAAM,QAAN,SAAuB,SAAA,CAAA,OAAvB,CAA8B;AAC5B,EAAA,WAAW,GAAA;AACT,UAAM,QAAQ,GAAG,CACf,uCADe,EAEf,sCAFe,EAGf,+BAHe,CAAjB;AAKA,WAAO,QAAP;AACD;;AAED,EAAA,WAAW,CAAC,KAAD,EAAwB;AACjC,UAAM,QAAQ,GAAG,KAAK,WAAL,EAAjB;AAEA,QAAI,QAAQ,GAAG,KAAK,CAAC,SAAN,CAAgB,WAAhB,EAAf;AACA,IAAA,QAAQ,GAAG,MAAM,YAAN,CAAmB,QAAnB,CAAX;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,UAAI,QAAQ,CAAC,UAAT,CAAoB,GAAG,QAAQ,CAAC,CAAD,CAAG,EAAlC,CAAJ,EAA2C;AACzC,eAAO,QAAP;AACD;AACF;;AACD,UAAM,IAAI,KAAJ,CAAU,aAAa,KAAK,CAAC,SAAS,6BAA6B,KAAK,CAAC,OAAO,EAAhF,CAAN;AACD;;AAED,EAAA,YAAY,CAAC,MAAD,EAAyB;AACnC,WAAO,EAAP;AACD;;AAED,EAAA,4BAA4B,GAAA;AAC1B,WAAO,IAAP;AACD;;AAED,EAAA,gBAAgB,CAAC,UAAD,EAAqB,OAArB,EAA+C;AAC7D,UAAM,CAAC,GAAG,OAAO,CAAC,IAAR,CAAa,UAAb,CAAV;AACA,UAAM,WAAW,GAAG,CAAC,CAAC,sBAAD,CAArB;;AAEA,QAAI,WAAW,KAAK,SAApB,EAA+B;AAC7B,UAAI,WAAW,CAAC,IAAZ,CAAiB,MAAjB,MAA6B,SAAjC,EAA4C;AAC1C,eAAO,EAAP;AACD;;AACD,YAAM,GAAG,GAAG,WAAW,CAAC,IAAZ,CAAiB,MAAjB,CAAZ,CAJ6B,CAM7B;;AACA,YAAM,UAAU,GAAG,GAAG,CAAC,KAAJ,CAAU,GAAV,EAAe,KAAf,GAAuB,KAAvB,CAA6B,GAA7B,EAAkC,GAAlC,EAAnB;AAEA,aAAO,UAAP;AACD,KAVD,MAUO;AACL,aAAO,EAAP;AACD;AACF;;AAED,EAAA,iBAAiB,CAAC,UAAD,EAAqB,OAArB,EAA+C;AAC9D,UAAM,CAAC,GAAG,OAAO,CAAC,IAAR,CAAa,UAAb,CAAV;AACA,UAAM,WAAW,GAAG,CAAC,CAAC,kCAAD,CAArB;AACA,QAAI,SAAS,GAAG,EAAhB;;AAEA,QAAI,WAAW,KAAK,SAApB,EAA+B;AAC7B,MAAA,SAAS,GAAG,WAAW,CAAC,IAAZ,CAAiB,SAAjB,CAAZ;AACD;;AAED,WAAO,SAAP;AACD;;AA7D2B;;AAgErB,OAAA,CAAA,QAAA,GAAA,QAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst service_1 = require(\"./service\");\nclass LinkedIn extends service_1.Service {\n    getBaseUrls() {\n        const baseUrls = [\n            'https://www.linkedin.com/feed/update/',\n            'http://www.linkedin.com/feed/update/',\n            'www.linkedin.com/feed/update/'\n        ];\n        return baseUrls;\n    }\n    getProofUrl(proof) {\n        const baseUrls = this.getBaseUrls();\n        let proofUrl = proof.proof_url.toLowerCase();\n        proofUrl = super.prefixScheme(proofUrl);\n        for (let i = 0; i < baseUrls.length; i++) {\n            if (proofUrl.startsWith(`${baseUrls[i]}`)) {\n                return proofUrl;\n            }\n        }\n        throw new Error(`Proof url ${proof.proof_url} is not valid for service ${proof.service}`);\n    }\n    normalizeUrl(_proof) {\n        return '';\n    }\n    shouldValidateIdentityInBody() {\n        return true;\n    }\n    getProofIdentity(searchText, cheerio) {\n        const $ = cheerio.load(searchText);\n        const profileLink = $('body > main header a');\n        if (profileLink !== undefined) {\n            if (profileLink.attr('href') === undefined) {\n                return '';\n            }\n            const url = profileLink.attr('href');\n            // Parse URL for identifier\n            const identifier = url.split('?').shift().split('/').pop();\n            return identifier;\n        }\n        else {\n            return '';\n        }\n    }\n    getProofStatement(searchText, cheerio) {\n        const $ = cheerio.load(searchText);\n        const postContent = $('head > meta[property=\"og:title\"]');\n        let statement = '';\n        if (postContent !== undefined) {\n            statement = postContent.attr('content');\n        }\n        return statement;\n    }\n}\nexports.LinkedIn = LinkedIn;\n//# sourceMappingURL=linkedIn.js.map"]},"metadata":{},"sourceType":"script"}
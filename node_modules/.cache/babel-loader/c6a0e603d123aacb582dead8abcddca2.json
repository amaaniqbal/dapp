{"ast":null,"code":"// Generated by IcedCoffeeScript 108.0.8\n(function () {\n  var AES,\n      BlockCipher,\n      G,\n      Global,\n      scrub_vec,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function (child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  BlockCipher = require('./algbase').BlockCipher;\n  scrub_vec = require('./util').scrub_vec;\n\n  Global = function () {\n    function Global() {\n      var i;\n      this.SBOX = [];\n      this.INV_SBOX = [];\n\n      this.SUB_MIX = function () {\n        var _i, _results;\n\n        _results = [];\n\n        for (i = _i = 0; _i < 4; i = ++_i) {\n          _results.push([]);\n        }\n\n        return _results;\n      }();\n\n      this.INV_SUB_MIX = function () {\n        var _i, _results;\n\n        _results = [];\n\n        for (i = _i = 0; _i < 4; i = ++_i) {\n          _results.push([]);\n        }\n\n        return _results;\n      }();\n\n      this.init();\n      this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n    }\n\n    Global.prototype.init = function () {\n      var d, i, sx, t, x, x2, x4, x8, xi, _i;\n\n      d = function () {\n        var _i, _results;\n\n        _results = [];\n\n        for (i = _i = 0; _i < 256; i = ++_i) {\n          if (i < 128) {\n            _results.push(i << 1);\n          } else {\n            _results.push(i << 1 ^ 0x11b);\n          }\n        }\n\n        return _results;\n      }();\n\n      x = 0;\n      xi = 0;\n\n      for (i = _i = 0; _i < 256; i = ++_i) {\n        sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;\n        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;\n        this.SBOX[x] = sx;\n        this.INV_SBOX[sx] = x;\n        x2 = d[x];\n        x4 = d[x2];\n        x8 = d[x4];\n        t = d[sx] * 0x101 ^ sx * 0x1010100;\n        this.SUB_MIX[0][x] = t << 24 | t >>> 8;\n        this.SUB_MIX[1][x] = t << 16 | t >>> 16;\n        this.SUB_MIX[2][x] = t << 8 | t >>> 24;\n        this.SUB_MIX[3][x] = t;\n        t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n        this.INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;\n        this.INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;\n        this.INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;\n        this.INV_SUB_MIX[3][sx] = t;\n\n        if (x === 0) {\n          x = xi = 1;\n        } else {\n          x = x2 ^ d[d[d[x8 ^ x2]]];\n          xi ^= d[d[xi]];\n        }\n      }\n\n      return true;\n    };\n\n    return Global;\n  }();\n\n  G = new Global();\n\n  AES = function (_super) {\n    __extends(AES, _super);\n\n    AES.blockSize = 4 * 4;\n    AES.prototype.blockSize = AES.blockSize;\n    AES.keySize = 256 / 8;\n    AES.prototype.keySize = AES.keySize;\n    AES.ivSize = AES.blockSize;\n    AES.prototype.ivSize = AES.ivSize;\n\n    function AES(key) {\n      this._key = key.clone();\n\n      this._doReset();\n    }\n\n    AES.prototype._doReset = function () {\n      var invKsRow, keySize, keyWords, ksRow, ksRows, t, _i, _j;\n\n      keyWords = this._key.words;\n      keySize = this._key.sigBytes / 4;\n      this._nRounds = keySize + 6;\n      ksRows = (this._nRounds + 1) * 4;\n      this._keySchedule = [];\n\n      for (ksRow = _i = 0; 0 <= ksRows ? _i < ksRows : _i > ksRows; ksRow = 0 <= ksRows ? ++_i : --_i) {\n        this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], ksRow % keySize === 0 ? (t = t << 8 | t >>> 24, t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff], t ^= G.RCON[ksRow / keySize | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t);\n      }\n\n      this._invKeySchedule = [];\n\n      for (invKsRow = _j = 0; 0 <= ksRows ? _j < ksRows : _j > ksRows; invKsRow = 0 <= ksRows ? ++_j : --_j) {\n        ksRow = ksRows - invKsRow;\n        t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)];\n        this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[t >>> 16 & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[t >>> 8 & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]];\n      }\n\n      return true;\n    };\n\n    AES.prototype.encryptBlock = function (M, offset) {\n      if (offset == null) {\n        offset = 0;\n      }\n\n      return this._doCryptBlock(M, offset, this._keySchedule, G.SUB_MIX, G.SBOX);\n    };\n\n    AES.prototype.decryptBlock = function (M, offset) {\n      var _ref, _ref1;\n\n      if (offset == null) {\n        offset = 0;\n      }\n\n      _ref = [M[offset + 3], M[offset + 1]], M[offset + 1] = _ref[0], M[offset + 3] = _ref[1];\n\n      this._doCryptBlock(M, offset, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX);\n\n      return _ref1 = [M[offset + 3], M[offset + 1]], M[offset + 1] = _ref1[0], M[offset + 3] = _ref1[1], _ref1;\n    };\n\n    AES.prototype.scrub = function () {\n      scrub_vec(this._keySchedule);\n      scrub_vec(this._invKeySchedule);\n      return this._key.scrub();\n    };\n\n    AES.prototype._doCryptBlock = function (M, offset, keySchedule, SUB_MIX, SBOX) {\n      var ksRow, round, s0, s1, s2, s3, t0, t1, t2, t3, _i, _ref;\n\n      s0 = M[offset] ^ keySchedule[0];\n      s1 = M[offset + 1] ^ keySchedule[1];\n      s2 = M[offset + 2] ^ keySchedule[2];\n      s3 = M[offset + 3] ^ keySchedule[3];\n      ksRow = 4;\n\n      for (round = _i = 1, _ref = this._nRounds; 1 <= _ref ? _i < _ref : _i > _ref; round = 1 <= _ref ? ++_i : --_i) {\n        t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][s1 >>> 16 & 0xff] ^ SUB_MIX[2][s2 >>> 8 & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++];\n        t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][s2 >>> 16 & 0xff] ^ SUB_MIX[2][s3 >>> 8 & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++];\n        t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][s3 >>> 16 & 0xff] ^ SUB_MIX[2][s0 >>> 8 & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++];\n        t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][s0 >>> 16 & 0xff] ^ SUB_MIX[2][s1 >>> 8 & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++];\n        s0 = t0;\n        s1 = t1;\n        s2 = t2;\n        s3 = t3;\n      }\n\n      t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n      t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n      t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n      t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n      M[offset] = t0;\n      M[offset + 1] = t1;\n      M[offset + 2] = t2;\n      return M[offset + 3] = t3;\n    };\n\n    return AES;\n  }(BlockCipher);\n\n  exports.AES = AES;\n}).call(this);","map":{"version":3,"sources":["/home/os/Desktop/hello-world-tutorial/node_modules/triplesec/lib/aes.js"],"names":["AES","BlockCipher","G","Global","scrub_vec","__hasProp","hasOwnProperty","__extends","child","parent","key","call","ctor","constructor","prototype","__super__","require","i","SBOX","INV_SBOX","SUB_MIX","_i","_results","push","INV_SUB_MIX","init","RCON","d","sx","t","x","x2","x4","x8","xi","_super","blockSize","keySize","ivSize","_key","clone","_doReset","invKsRow","keyWords","ksRow","ksRows","_j","words","sigBytes","_nRounds","_keySchedule","_invKeySchedule","encryptBlock","M","offset","_doCryptBlock","decryptBlock","_ref","_ref1","scrub","keySchedule","round","s0","s1","s2","s3","t0","t1","t2","t3","exports"],"mappings":"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","sourcesContent":["// Generated by IcedCoffeeScript 108.0.8\n(function() {\n  var AES, BlockCipher, G, Global, scrub_vec,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  BlockCipher = require('./algbase').BlockCipher;\n\n  scrub_vec = require('./util').scrub_vec;\n\n  Global = (function() {\n    function Global() {\n      var i;\n      this.SBOX = [];\n      this.INV_SBOX = [];\n      this.SUB_MIX = (function() {\n        var _i, _results;\n        _results = [];\n        for (i = _i = 0; _i < 4; i = ++_i) {\n          _results.push([]);\n        }\n        return _results;\n      })();\n      this.INV_SUB_MIX = (function() {\n        var _i, _results;\n        _results = [];\n        for (i = _i = 0; _i < 4; i = ++_i) {\n          _results.push([]);\n        }\n        return _results;\n      })();\n      this.init();\n      this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n    }\n\n    Global.prototype.init = function() {\n      var d, i, sx, t, x, x2, x4, x8, xi, _i;\n      d = (function() {\n        var _i, _results;\n        _results = [];\n        for (i = _i = 0; _i < 256; i = ++_i) {\n          if (i < 128) {\n            _results.push(i << 1);\n          } else {\n            _results.push((i << 1) ^ 0x11b);\n          }\n        }\n        return _results;\n      })();\n      x = 0;\n      xi = 0;\n      for (i = _i = 0; _i < 256; i = ++_i) {\n        sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n        sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n        this.SBOX[x] = sx;\n        this.INV_SBOX[sx] = x;\n        x2 = d[x];\n        x4 = d[x2];\n        x8 = d[x4];\n        t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n        this.SUB_MIX[0][x] = (t << 24) | (t >>> 8);\n        this.SUB_MIX[1][x] = (t << 16) | (t >>> 16);\n        this.SUB_MIX[2][x] = (t << 8) | (t >>> 24);\n        this.SUB_MIX[3][x] = t;\n        t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n        this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8);\n        this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16);\n        this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24);\n        this.INV_SUB_MIX[3][sx] = t;\n        if (x === 0) {\n          x = xi = 1;\n        } else {\n          x = x2 ^ d[d[d[x8 ^ x2]]];\n          xi ^= d[d[xi]];\n        }\n      }\n      return true;\n    };\n\n    return Global;\n\n  })();\n\n  G = new Global();\n\n  AES = (function(_super) {\n    __extends(AES, _super);\n\n    AES.blockSize = 4 * 4;\n\n    AES.prototype.blockSize = AES.blockSize;\n\n    AES.keySize = 256 / 8;\n\n    AES.prototype.keySize = AES.keySize;\n\n    AES.ivSize = AES.blockSize;\n\n    AES.prototype.ivSize = AES.ivSize;\n\n    function AES(key) {\n      this._key = key.clone();\n      this._doReset();\n    }\n\n    AES.prototype._doReset = function() {\n      var invKsRow, keySize, keyWords, ksRow, ksRows, t, _i, _j;\n      keyWords = this._key.words;\n      keySize = this._key.sigBytes / 4;\n      this._nRounds = keySize + 6;\n      ksRows = (this._nRounds + 1) * 4;\n      this._keySchedule = [];\n      for (ksRow = _i = 0; 0 <= ksRows ? _i < ksRows : _i > ksRows; ksRow = 0 <= ksRows ? ++_i : --_i) {\n        this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t);\n      }\n      this._invKeySchedule = [];\n      for (invKsRow = _j = 0; 0 <= ksRows ? _j < ksRows : _j > ksRows; invKsRow = 0 <= ksRows ? ++_j : --_j) {\n        ksRow = ksRows - invKsRow;\n        t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)];\n        this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]];\n      }\n      return true;\n    };\n\n    AES.prototype.encryptBlock = function(M, offset) {\n      if (offset == null) {\n        offset = 0;\n      }\n      return this._doCryptBlock(M, offset, this._keySchedule, G.SUB_MIX, G.SBOX);\n    };\n\n    AES.prototype.decryptBlock = function(M, offset) {\n      var _ref, _ref1;\n      if (offset == null) {\n        offset = 0;\n      }\n      _ref = [M[offset + 3], M[offset + 1]], M[offset + 1] = _ref[0], M[offset + 3] = _ref[1];\n      this._doCryptBlock(M, offset, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX);\n      return _ref1 = [M[offset + 3], M[offset + 1]], M[offset + 1] = _ref1[0], M[offset + 3] = _ref1[1], _ref1;\n    };\n\n    AES.prototype.scrub = function() {\n      scrub_vec(this._keySchedule);\n      scrub_vec(this._invKeySchedule);\n      return this._key.scrub();\n    };\n\n    AES.prototype._doCryptBlock = function(M, offset, keySchedule, SUB_MIX, SBOX) {\n      var ksRow, round, s0, s1, s2, s3, t0, t1, t2, t3, _i, _ref;\n      s0 = M[offset] ^ keySchedule[0];\n      s1 = M[offset + 1] ^ keySchedule[1];\n      s2 = M[offset + 2] ^ keySchedule[2];\n      s3 = M[offset + 3] ^ keySchedule[3];\n      ksRow = 4;\n      for (round = _i = 1, _ref = this._nRounds; 1 <= _ref ? _i < _ref : _i > _ref; round = 1 <= _ref ? ++_i : --_i) {\n        t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++];\n        t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++];\n        t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++];\n        t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++];\n        s0 = t0;\n        s1 = t1;\n        s2 = t2;\n        s3 = t3;\n      }\n      t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n      t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n      t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n      t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n      M[offset] = t0;\n      M[offset + 1] = t1;\n      M[offset + 2] = t2;\n      return M[offset + 3] = t3;\n    };\n\n    return AES;\n\n  })(BlockCipher);\n\n  exports.AES = AES;\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}
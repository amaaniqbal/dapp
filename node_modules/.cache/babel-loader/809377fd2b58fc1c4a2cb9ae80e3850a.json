{"ast":null,"code":"// Generated by IcedCoffeeScript 108.0.8\n(function () {\n  var Global,\n      Hasher,\n      SHA3,\n      WordArray,\n      X64Word,\n      X64WordArray,\n      glbl,\n      _ref,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function (child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n\n  _ref = require('./wordarray'), WordArray = _ref.WordArray, X64Word = _ref.X64Word, X64WordArray = _ref.X64WordArray;\n  Hasher = require('./algbase').Hasher;\n\n  Global = function () {\n    function Global() {\n      this.RHO_OFFSETS = [];\n      this.PI_INDEXES = [];\n      this.ROUND_CONSTANTS = [];\n      this.T = [];\n      this.compute_rho_offsets();\n      this.compute_pi_indexes();\n      this.compute_round_constants();\n      this.make_reusables();\n    }\n\n    Global.prototype.compute_rho_offsets = function () {\n      var newX, newY, t, x, y, _i, _results;\n\n      x = 1;\n      y = 0;\n      _results = [];\n\n      for (t = _i = 0; _i < 24; t = ++_i) {\n        this.RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;\n        newX = y % 5;\n        newY = (2 * x + 3 * y) % 5;\n        x = newX;\n\n        _results.push(y = newY);\n      }\n\n      return _results;\n    };\n\n    Global.prototype.compute_pi_indexes = function () {\n      var x, y, _i, _results;\n\n      _results = [];\n\n      for (x = _i = 0; _i < 5; x = ++_i) {\n        _results.push(function () {\n          var _j, _results1;\n\n          _results1 = [];\n\n          for (y = _j = 0; _j < 5; y = ++_j) {\n            _results1.push(this.PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5);\n          }\n\n          return _results1;\n        }.call(this));\n      }\n\n      return _results;\n    };\n\n    Global.prototype.compute_round_constants = function () {\n      var LFSR, bitPosition, i, j, roundConstantLsw, roundConstantMsw, _i, _j, _results;\n\n      LFSR = 0x01;\n      _results = [];\n\n      for (i = _i = 0; _i < 24; i = ++_i) {\n        roundConstantMsw = 0;\n        roundConstantLsw = 0;\n\n        for (j = _j = 0; _j < 7; j = ++_j) {\n          if (LFSR & 0x01) {\n            bitPosition = (1 << j) - 1;\n\n            if (bitPosition < 32) {\n              roundConstantLsw ^= 1 << bitPosition;\n            } else {\n              roundConstantMsw ^= 1 << bitPosition - 32;\n            }\n          }\n\n          if (LFSR & 0x80) {\n            LFSR = LFSR << 1 ^ 0x71;\n          } else {\n            LFSR <<= 1;\n          }\n        }\n\n        _results.push(this.ROUND_CONSTANTS[i] = new X64Word(roundConstantMsw, roundConstantLsw));\n      }\n\n      return _results;\n    };\n\n    Global.prototype.make_reusables = function () {\n      var i;\n      return this.T = function () {\n        var _i, _results;\n\n        _results = [];\n\n        for (i = _i = 0; _i < 25; i = ++_i) {\n          _results.push(new X64Word(0, 0));\n        }\n\n        return _results;\n      }();\n    };\n\n    return Global;\n  }();\n\n  glbl = new Global();\n\n  exports.SHA3 = SHA3 = function (_super) {\n    __extends(SHA3, _super);\n\n    function SHA3() {\n      return SHA3.__super__.constructor.apply(this, arguments);\n    }\n\n    SHA3.outputLength = 512;\n    SHA3.prototype.outputLength = SHA3.outputLength;\n    SHA3.blockSize = (1600 - 2 * SHA3.outputLength) / 32;\n    SHA3.prototype.blockSize = SHA3.blockSize;\n    SHA3.output_size = SHA3.outputLength / 8;\n    SHA3.prototype.output_size = SHA3.output_size;\n\n    SHA3.prototype._doReset = function () {\n      var i;\n      return this._state = function () {\n        var _i, _results;\n\n        _results = [];\n\n        for (i = _i = 0; _i < 25; i = ++_i) {\n          _results.push(new X64Word(0, 0));\n        }\n\n        return _results;\n      }();\n    };\n\n    SHA3.prototype._doProcessBlock = function (M, offset) {\n      var G, M2i, M2i1, T0, TLane, TPiLane, Tx, Tx1, Tx1Lane, Tx1Lsw, Tx1Msw, Tx2Lane, Tx4, i, lane, laneIndex, laneLsw, laneMsw, nBlockSizeLanes, rhoOffset, round, roundConstant, state, state0, tLsw, tMsw, x, y, _i, _j, _k, _l, _m, _n, _o, _p, _q, _results;\n\n      G = glbl;\n      state = this._state;\n      nBlockSizeLanes = this.blockSize / 2;\n\n      for (i = _i = 0; 0 <= nBlockSizeLanes ? _i < nBlockSizeLanes : _i > nBlockSizeLanes; i = 0 <= nBlockSizeLanes ? ++_i : --_i) {\n        M2i = M[offset + 2 * i];\n        M2i1 = M[offset + 2 * i + 1];\n        M2i = (M2i << 8 | M2i >>> 24) & 0x00ff00ff | (M2i << 24 | M2i >>> 8) & 0xff00ff00;\n        M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 0x00ff00ff | (M2i1 << 24 | M2i1 >>> 8) & 0xff00ff00;\n        lane = state[i];\n        lane.high ^= M2i1;\n        lane.low ^= M2i;\n      }\n\n      _results = [];\n\n      for (round = _j = 0; _j < 24; round = ++_j) {\n        for (x = _k = 0; _k < 5; x = ++_k) {\n          tMsw = tLsw = 0;\n\n          for (y = _l = 0; _l < 5; y = ++_l) {\n            lane = state[x + 5 * y];\n            tMsw ^= lane.high;\n            tLsw ^= lane.low;\n          }\n\n          Tx = G.T[x];\n          Tx.high = tMsw;\n          Tx.low = tLsw;\n        }\n\n        for (x = _m = 0; _m < 5; x = ++_m) {\n          Tx4 = G.T[(x + 4) % 5];\n          Tx1 = G.T[(x + 1) % 5];\n          Tx1Msw = Tx1.high;\n          Tx1Lsw = Tx1.low;\n          tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);\n          tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);\n\n          for (y = _n = 0; _n < 5; y = ++_n) {\n            lane = state[x + 5 * y];\n            lane.high ^= tMsw;\n            lane.low ^= tLsw;\n          }\n        }\n\n        for (laneIndex = _o = 1; _o < 25; laneIndex = ++_o) {\n          lane = state[laneIndex];\n          laneMsw = lane.high;\n          laneLsw = lane.low;\n          rhoOffset = G.RHO_OFFSETS[laneIndex];\n\n          if (rhoOffset < 32) {\n            tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;\n            tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;\n          } else {\n            tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;\n            tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;\n          }\n\n          TPiLane = G.T[G.PI_INDEXES[laneIndex]];\n          TPiLane.high = tMsw;\n          TPiLane.low = tLsw;\n        }\n\n        T0 = G.T[0];\n        state0 = state[0];\n        T0.high = state0.high;\n        T0.low = state0.low;\n\n        for (x = _p = 0; _p < 5; x = ++_p) {\n          for (y = _q = 0; _q < 5; y = ++_q) {\n            laneIndex = x + 5 * y;\n            lane = state[laneIndex];\n            TLane = G.T[laneIndex];\n            Tx1Lane = G.T[(x + 1) % 5 + 5 * y];\n            Tx2Lane = G.T[(x + 2) % 5 + 5 * y];\n            lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;\n            lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;\n          }\n        }\n\n        lane = state[0];\n        roundConstant = G.ROUND_CONSTANTS[round];\n        lane.high ^= roundConstant.high;\n\n        _results.push(lane.low ^= roundConstant.low);\n      }\n\n      return _results;\n    };\n\n    SHA3.prototype._doFinalize = function () {\n      var blockSizeBits, data, dataWords, hashWords, i, lane, laneLsw, laneMsw, nBitsLeft, nBitsTotal, outputLengthBytes, outputLengthLanes, state, _i;\n\n      data = this._data;\n      dataWords = data.words;\n      nBitsTotal = this._nDataBytes * 8;\n      nBitsLeft = data.sigBytes * 8;\n      blockSizeBits = this.blockSize * 32;\n      dataWords[nBitsLeft >>> 5] |= 0x1 << 24 - nBitsLeft % 32;\n      dataWords[(Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 0x80;\n      data.sigBytes = dataWords.length * 4;\n\n      this._process();\n\n      state = this._state;\n      outputLengthBytes = this.outputLength / 8;\n      outputLengthLanes = outputLengthBytes / 8;\n      hashWords = [];\n\n      for (i = _i = 0; 0 <= outputLengthLanes ? _i < outputLengthLanes : _i > outputLengthLanes; i = 0 <= outputLengthLanes ? ++_i : --_i) {\n        lane = state[i];\n        laneMsw = lane.high;\n        laneLsw = lane.low;\n        laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 0x00ff00ff | (laneMsw << 24 | laneMsw >>> 8) & 0xff00ff00;\n        laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 0x00ff00ff | (laneLsw << 24 | laneLsw >>> 8) & 0xff00ff00;\n        hashWords.push(laneLsw);\n        hashWords.push(laneMsw);\n      }\n\n      return new WordArray(hashWords, outputLengthBytes);\n    };\n\n    SHA3.prototype.copy_to = function (obj) {\n      var s;\n\n      SHA3.__super__.copy_to.call(this, obj);\n\n      return obj._state = function () {\n        var _i, _len, _ref1, _results;\n\n        _ref1 = this._state;\n        _results = [];\n\n        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n          s = _ref1[_i];\n\n          _results.push(s.clone());\n        }\n\n        return _results;\n      }.call(this);\n    };\n\n    SHA3.prototype.scrub = function () {};\n\n    SHA3.prototype.clone = function () {\n      var out;\n      out = new SHA3();\n      this.copy_to(out);\n      return out;\n    };\n\n    return SHA3;\n  }(Hasher);\n\n  exports.transform = function (x) {\n    var out;\n    out = new SHA3().finalize(x);\n    x.scrub();\n    return out;\n  };\n}).call(this);","map":{"version":3,"sources":["/home/os/Desktop/hello-world-tutorial/node_modules/triplesec/lib/sha3.js"],"names":["Global","Hasher","SHA3","WordArray","X64Word","X64WordArray","glbl","_ref","__hasProp","hasOwnProperty","__extends","child","parent","key","call","ctor","constructor","prototype","__super__","require","RHO_OFFSETS","PI_INDEXES","ROUND_CONSTANTS","T","compute_rho_offsets","compute_pi_indexes","compute_round_constants","make_reusables","newX","newY","t","x","y","_i","_results","push","_j","_results1","LFSR","bitPosition","i","j","roundConstantLsw","roundConstantMsw","exports","_super","apply","arguments","outputLength","blockSize","output_size","_doReset","_state","_doProcessBlock","M","offset","G","M2i","M2i1","T0","TLane","TPiLane","Tx","Tx1","Tx1Lane","Tx1Lsw","Tx1Msw","Tx2Lane","Tx4","lane","laneIndex","laneLsw","laneMsw","nBlockSizeLanes","rhoOffset","round","roundConstant","state","state0","tLsw","tMsw","_k","_l","_m","_n","_o","_p","_q","high","low","_doFinalize","blockSizeBits","data","dataWords","hashWords","nBitsLeft","nBitsTotal","outputLengthBytes","outputLengthLanes","_data","words","_nDataBytes","sigBytes","Math","ceil","length","_process","copy_to","obj","s","_len","_ref1","clone","scrub","out","transform","finalize"],"mappings":"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","sourcesContent":["// Generated by IcedCoffeeScript 108.0.8\n(function() {\n  var Global, Hasher, SHA3, WordArray, X64Word, X64WordArray, glbl, _ref,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  _ref = require('./wordarray'), WordArray = _ref.WordArray, X64Word = _ref.X64Word, X64WordArray = _ref.X64WordArray;\n\n  Hasher = require('./algbase').Hasher;\n\n  Global = (function() {\n    function Global() {\n      this.RHO_OFFSETS = [];\n      this.PI_INDEXES = [];\n      this.ROUND_CONSTANTS = [];\n      this.T = [];\n      this.compute_rho_offsets();\n      this.compute_pi_indexes();\n      this.compute_round_constants();\n      this.make_reusables();\n    }\n\n    Global.prototype.compute_rho_offsets = function() {\n      var newX, newY, t, x, y, _i, _results;\n      x = 1;\n      y = 0;\n      _results = [];\n      for (t = _i = 0; _i < 24; t = ++_i) {\n        this.RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;\n        newX = y % 5;\n        newY = (2 * x + 3 * y) % 5;\n        x = newX;\n        _results.push(y = newY);\n      }\n      return _results;\n    };\n\n    Global.prototype.compute_pi_indexes = function() {\n      var x, y, _i, _results;\n      _results = [];\n      for (x = _i = 0; _i < 5; x = ++_i) {\n        _results.push((function() {\n          var _j, _results1;\n          _results1 = [];\n          for (y = _j = 0; _j < 5; y = ++_j) {\n            _results1.push(this.PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5);\n          }\n          return _results1;\n        }).call(this));\n      }\n      return _results;\n    };\n\n    Global.prototype.compute_round_constants = function() {\n      var LFSR, bitPosition, i, j, roundConstantLsw, roundConstantMsw, _i, _j, _results;\n      LFSR = 0x01;\n      _results = [];\n      for (i = _i = 0; _i < 24; i = ++_i) {\n        roundConstantMsw = 0;\n        roundConstantLsw = 0;\n        for (j = _j = 0; _j < 7; j = ++_j) {\n          if (LFSR & 0x01) {\n            bitPosition = (1 << j) - 1;\n            if (bitPosition < 32) {\n              roundConstantLsw ^= 1 << bitPosition;\n            } else {\n              roundConstantMsw ^= 1 << (bitPosition - 32);\n            }\n          }\n          if (LFSR & 0x80) {\n            LFSR = (LFSR << 1) ^ 0x71;\n          } else {\n            LFSR <<= 1;\n          }\n        }\n        _results.push(this.ROUND_CONSTANTS[i] = new X64Word(roundConstantMsw, roundConstantLsw));\n      }\n      return _results;\n    };\n\n    Global.prototype.make_reusables = function() {\n      var i;\n      return this.T = (function() {\n        var _i, _results;\n        _results = [];\n        for (i = _i = 0; _i < 25; i = ++_i) {\n          _results.push(new X64Word(0, 0));\n        }\n        return _results;\n      })();\n    };\n\n    return Global;\n\n  })();\n\n  glbl = new Global();\n\n  exports.SHA3 = SHA3 = (function(_super) {\n    __extends(SHA3, _super);\n\n    function SHA3() {\n      return SHA3.__super__.constructor.apply(this, arguments);\n    }\n\n    SHA3.outputLength = 512;\n\n    SHA3.prototype.outputLength = SHA3.outputLength;\n\n    SHA3.blockSize = (1600 - 2 * SHA3.outputLength) / 32;\n\n    SHA3.prototype.blockSize = SHA3.blockSize;\n\n    SHA3.output_size = SHA3.outputLength / 8;\n\n    SHA3.prototype.output_size = SHA3.output_size;\n\n    SHA3.prototype._doReset = function() {\n      var i;\n      return this._state = (function() {\n        var _i, _results;\n        _results = [];\n        for (i = _i = 0; _i < 25; i = ++_i) {\n          _results.push(new X64Word(0, 0));\n        }\n        return _results;\n      })();\n    };\n\n    SHA3.prototype._doProcessBlock = function(M, offset) {\n      var G, M2i, M2i1, T0, TLane, TPiLane, Tx, Tx1, Tx1Lane, Tx1Lsw, Tx1Msw, Tx2Lane, Tx4, i, lane, laneIndex, laneLsw, laneMsw, nBlockSizeLanes, rhoOffset, round, roundConstant, state, state0, tLsw, tMsw, x, y, _i, _j, _k, _l, _m, _n, _o, _p, _q, _results;\n      G = glbl;\n      state = this._state;\n      nBlockSizeLanes = this.blockSize / 2;\n      for (i = _i = 0; 0 <= nBlockSizeLanes ? _i < nBlockSizeLanes : _i > nBlockSizeLanes; i = 0 <= nBlockSizeLanes ? ++_i : --_i) {\n        M2i = M[offset + 2 * i];\n        M2i1 = M[offset + 2 * i + 1];\n        M2i = (((M2i << 8) | (M2i >>> 24)) & 0x00ff00ff) | (((M2i << 24) | (M2i >>> 8)) & 0xff00ff00);\n        M2i1 = (((M2i1 << 8) | (M2i1 >>> 24)) & 0x00ff00ff) | (((M2i1 << 24) | (M2i1 >>> 8)) & 0xff00ff00);\n        lane = state[i];\n        lane.high ^= M2i1;\n        lane.low ^= M2i;\n      }\n      _results = [];\n      for (round = _j = 0; _j < 24; round = ++_j) {\n        for (x = _k = 0; _k < 5; x = ++_k) {\n          tMsw = tLsw = 0;\n          for (y = _l = 0; _l < 5; y = ++_l) {\n            lane = state[x + 5 * y];\n            tMsw ^= lane.high;\n            tLsw ^= lane.low;\n          }\n          Tx = G.T[x];\n          Tx.high = tMsw;\n          Tx.low = tLsw;\n        }\n        for (x = _m = 0; _m < 5; x = ++_m) {\n          Tx4 = G.T[(x + 4) % 5];\n          Tx1 = G.T[(x + 1) % 5];\n          Tx1Msw = Tx1.high;\n          Tx1Lsw = Tx1.low;\n          tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));\n          tLsw = Tx4.low ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));\n          for (y = _n = 0; _n < 5; y = ++_n) {\n            lane = state[x + 5 * y];\n            lane.high ^= tMsw;\n            lane.low ^= tLsw;\n          }\n        }\n        for (laneIndex = _o = 1; _o < 25; laneIndex = ++_o) {\n          lane = state[laneIndex];\n          laneMsw = lane.high;\n          laneLsw = lane.low;\n          rhoOffset = G.RHO_OFFSETS[laneIndex];\n          if (rhoOffset < 32) {\n            tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));\n            tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));\n          } else {\n            tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));\n            tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));\n          }\n          TPiLane = G.T[G.PI_INDEXES[laneIndex]];\n          TPiLane.high = tMsw;\n          TPiLane.low = tLsw;\n        }\n        T0 = G.T[0];\n        state0 = state[0];\n        T0.high = state0.high;\n        T0.low = state0.low;\n        for (x = _p = 0; _p < 5; x = ++_p) {\n          for (y = _q = 0; _q < 5; y = ++_q) {\n            laneIndex = x + 5 * y;\n            lane = state[laneIndex];\n            TLane = G.T[laneIndex];\n            Tx1Lane = G.T[((x + 1) % 5) + 5 * y];\n            Tx2Lane = G.T[((x + 2) % 5) + 5 * y];\n            lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);\n            lane.low = TLane.low ^ (~Tx1Lane.low & Tx2Lane.low);\n          }\n        }\n        lane = state[0];\n        roundConstant = G.ROUND_CONSTANTS[round];\n        lane.high ^= roundConstant.high;\n        _results.push(lane.low ^= roundConstant.low);\n      }\n      return _results;\n    };\n\n    SHA3.prototype._doFinalize = function() {\n      var blockSizeBits, data, dataWords, hashWords, i, lane, laneLsw, laneMsw, nBitsLeft, nBitsTotal, outputLengthBytes, outputLengthLanes, state, _i;\n      data = this._data;\n      dataWords = data.words;\n      nBitsTotal = this._nDataBytes * 8;\n      nBitsLeft = data.sigBytes * 8;\n      blockSizeBits = this.blockSize * 32;\n      dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);\n      dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;\n      data.sigBytes = dataWords.length * 4;\n      this._process();\n      state = this._state;\n      outputLengthBytes = this.outputLength / 8;\n      outputLengthLanes = outputLengthBytes / 8;\n      hashWords = [];\n      for (i = _i = 0; 0 <= outputLengthLanes ? _i < outputLengthLanes : _i > outputLengthLanes; i = 0 <= outputLengthLanes ? ++_i : --_i) {\n        lane = state[i];\n        laneMsw = lane.high;\n        laneLsw = lane.low;\n        laneMsw = (((laneMsw << 8) | (laneMsw >>> 24)) & 0x00ff00ff) | (((laneMsw << 24) | (laneMsw >>> 8)) & 0xff00ff00);\n        laneLsw = (((laneLsw << 8) | (laneLsw >>> 24)) & 0x00ff00ff) | (((laneLsw << 24) | (laneLsw >>> 8)) & 0xff00ff00);\n        hashWords.push(laneLsw);\n        hashWords.push(laneMsw);\n      }\n      return new WordArray(hashWords, outputLengthBytes);\n    };\n\n    SHA3.prototype.copy_to = function(obj) {\n      var s;\n      SHA3.__super__.copy_to.call(this, obj);\n      return obj._state = (function() {\n        var _i, _len, _ref1, _results;\n        _ref1 = this._state;\n        _results = [];\n        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n          s = _ref1[_i];\n          _results.push(s.clone());\n        }\n        return _results;\n      }).call(this);\n    };\n\n    SHA3.prototype.scrub = function() {};\n\n    SHA3.prototype.clone = function() {\n      var out;\n      out = new SHA3();\n      this.copy_to(out);\n      return out;\n    };\n\n    return SHA3;\n\n  })(Hasher);\n\n  exports.transform = function(x) {\n    var out;\n    out = (new SHA3).finalize(x);\n    x.scrub();\n    return out;\n  };\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *\n * @ignore\n */\n\nfunction containsValidProofStatement(searchText, name = null) {\n  if (!name) {\n    return false;\n  }\n\n  searchText = searchText.toLowerCase();\n\n  if (name.split('.').length < 2) {\n    throw new Error('Please provide the fully qualified Blockstack name.');\n  }\n\n  let username = null; // support legacy Blockstack ID proofs\n\n  if (name.endsWith('.id')) {\n    username = name.split('.id')[0];\n  }\n\n  const verificationStyles = username != null ? [`verifying myself: my bitcoin username is +${username}`, `verifying myself: my bitcoin username is ${username}`, `verifying myself: my openname is ${username}`, `verifying that +${username} is my bitcoin username`, `verifying that ${username} is my bitcoin username`, `verifying that ${username} is my openname`, `verifying that +${username} is my openname`, `verifying i am +${username} on my passcard`, `verifying that +${username} is my blockchain id`, `verifying that \"${name}\" is my blockstack id`, `verifying that ${name} is my blockstack id`, `verifying that &quot;${name}&quot; is my blockstack id`] : [`verifying that \"${name}\" is my blockstack id`, `verifying that ${name} is my blockstack id`, `verifying that &quot;${name}&quot; is my blockstack id`];\n\n  for (let i = 0; i < verificationStyles.length; i++) {\n    const verificationStyle = verificationStyles[i];\n\n    if (searchText.includes(verificationStyle)) {\n      return true;\n    }\n  }\n\n  if (username != null && searchText.includes('verifymyonename') && searchText.includes(`+${username}`)) {\n    return true;\n  }\n\n  return false;\n}\n\nexports.containsValidProofStatement = containsValidProofStatement;\n/**\n *\n * @ignore\n */\n\nfunction containsValidAddressProofStatement(proofStatement, address) {\n  proofStatement = proofStatement.split(address)[0].toLowerCase() + address;\n  const verificationStyles = [`verifying my blockstack id is secured with the address ${address}`];\n\n  for (let i = 0; i < verificationStyles.length; i++) {\n    const verificationStyle = verificationStyles[i];\n\n    if (proofStatement.includes(verificationStyle)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexports.containsValidAddressProofStatement = containsValidAddressProofStatement;","map":null,"metadata":{},"sourceType":"script"}
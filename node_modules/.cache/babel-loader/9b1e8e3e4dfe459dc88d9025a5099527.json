{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst errors_1 = require(\"../errors\");\n\nconst SESSION_VERSION = '1.0.0';\n/**\n * @ignore\n */\n\nclass SessionData {\n  constructor(options) {\n    this.version = SESSION_VERSION;\n    this.appPrivateKey = options.appPrivateKey;\n    this.identityAddress = options.identityAddress;\n    this.username = options.username;\n    this.coreNode = options.coreNode;\n    this.hubUrl = options.hubUrl;\n    this.userData = options.userData;\n    this.transitKey = options.transitKey;\n  }\n\n  getGaiaHubConfig() {\n    return this.userData && this.userData.gaiaHubConfig;\n  }\n\n  setGaiaHubConfig(config) {\n    this.userData.gaiaHubConfig = config;\n  }\n\n  static fromJSON(json) {\n    if (json.version !== SESSION_VERSION) {\n      throw new errors_1.InvalidStateError(`JSON data version ${json.version} not supported by SessionData`);\n    }\n\n    const options = {\n      appPrivateKey: json.appPrivateKey,\n      identityAddress: json.identityAddress,\n      username: json.username,\n      coreNode: json.coreNode,\n      hubUrl: json.hubUrl,\n      userData: json.userData,\n      transitKey: json.transitKey\n    };\n    return new SessionData(options);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n}\n\nexports.SessionData = SessionData;","map":{"version":3,"sources":["../../src/auth/sessionData.ts"],"names":[],"mappings":";;;;;;AAEA,MAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAGA,MAAM,eAAe,GAAG,OAAxB;AAgBA;;;;AAGA,MAAa,WAAb,CAAwB;AAmBtB,EAAA,WAAA,CAAY,OAAZ,EAAmC;AACjC,SAAK,OAAL,GAAe,eAAf;AACA,SAAK,aAAL,GAAqB,OAAO,CAAC,aAA7B;AACA,SAAK,eAAL,GAAuB,OAAO,CAAC,eAA/B;AACA,SAAK,QAAL,GAAgB,OAAO,CAAC,QAAxB;AACA,SAAK,QAAL,GAAgB,OAAO,CAAC,QAAxB;AACA,SAAK,MAAL,GAAc,OAAO,CAAC,MAAtB;AACA,SAAK,QAAL,GAAgB,OAAO,CAAC,QAAxB;AACA,SAAK,UAAL,GAAkB,OAAO,CAAC,UAA1B;AACD;;AAED,EAAA,gBAAgB,GAAA;AACd,WAAO,KAAK,QAAL,IAAiB,KAAK,QAAL,CAAc,aAAtC;AACD;;AAED,EAAA,gBAAgB,CAAC,MAAD,EAAsB;AACpC,SAAK,QAAL,CAAc,aAAd,GAA8B,MAA9B;AACD;;AAED,SAAO,QAAP,CAAgB,IAAhB,EAAyB;AACvB,QAAI,IAAI,CAAC,OAAL,KAAiB,eAArB,EAAsC;AACpC,YAAM,IAAI,QAAA,CAAA,iBAAJ,CAAsB,qBAAqB,IAAI,CAAC,OAAO,+BAAvD,CAAN;AACD;;AACD,UAAM,OAAO,GAAmB;AAC9B,MAAA,aAAa,EAAE,IAAI,CAAC,aADU;AAE9B,MAAA,eAAe,EAAE,IAAI,CAAC,eAFQ;AAG9B,MAAA,QAAQ,EAAE,IAAI,CAAC,QAHe;AAI9B,MAAA,QAAQ,EAAE,IAAI,CAAC,QAJe;AAK9B,MAAA,MAAM,EAAE,IAAI,CAAC,MALiB;AAM9B,MAAA,QAAQ,EAAE,IAAI,CAAC,QANe;AAO9B,MAAA,UAAU,EAAE,IAAI,CAAC;AAPa,KAAhC;AASA,WAAO,IAAI,WAAJ,CAAgB,OAAhB,CAAP;AACD;;AAED,EAAA,QAAQ,GAAA;AACN,WAAO,IAAI,CAAC,SAAL,CAAe,IAAf,CAAP;AACD;;AAxDqB;;AAAxB,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst errors_1 = require(\"../errors\");\nconst SESSION_VERSION = '1.0.0';\n/**\n * @ignore\n */\nclass SessionData {\n    constructor(options) {\n        this.version = SESSION_VERSION;\n        this.appPrivateKey = options.appPrivateKey;\n        this.identityAddress = options.identityAddress;\n        this.username = options.username;\n        this.coreNode = options.coreNode;\n        this.hubUrl = options.hubUrl;\n        this.userData = options.userData;\n        this.transitKey = options.transitKey;\n    }\n    getGaiaHubConfig() {\n        return this.userData && this.userData.gaiaHubConfig;\n    }\n    setGaiaHubConfig(config) {\n        this.userData.gaiaHubConfig = config;\n    }\n    static fromJSON(json) {\n        if (json.version !== SESSION_VERSION) {\n            throw new errors_1.InvalidStateError(`JSON data version ${json.version} not supported by SessionData`);\n        }\n        const options = {\n            appPrivateKey: json.appPrivateKey,\n            identityAddress: json.identityAddress,\n            username: json.username,\n            coreNode: json.coreNode,\n            hubUrl: json.hubUrl,\n            userData: json.userData,\n            transitKey: json.transitKey\n        };\n        return new SessionData(options);\n    }\n    toString() {\n        return JSON.stringify(this);\n    }\n}\nexports.SessionData = SessionData;\n//# sourceMappingURL=sessionData.js.map"]},"metadata":{},"sourceType":"script"}
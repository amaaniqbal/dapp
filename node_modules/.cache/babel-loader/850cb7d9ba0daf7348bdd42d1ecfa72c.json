{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst cheerio = require(\"cheerio\");\n\nconst service_1 = require(\"./service\");\n\nclass Instagram extends service_1.Service {\n  static getBaseUrls() {\n    const baseUrls = ['https://www.instagram.com/', 'https://instagram.com/'];\n    return baseUrls;\n  }\n\n  static getProofUrl(proof) {\n    const baseUrls = this.getBaseUrls();\n    const normalizedProofUrl = this.normalizeUrl(proof);\n\n    for (let i = 0; i < baseUrls.length; i++) {\n      if (normalizedProofUrl.startsWith(`${baseUrls[i]}`)) {\n        return normalizedProofUrl;\n      }\n    }\n\n    throw new Error(`Proof url ${proof.proof_url} is not valid for service ${proof.service}`);\n  }\n\n  static normalizeUrl(proof) {\n    let proofUrl = proof.proof_url;\n    proofUrl = super.prefixScheme(proofUrl);\n\n    if (proofUrl.startsWith('https://instagram.com')) {\n      const tokens = proofUrl.split('https://instagram.com');\n      proofUrl = `https://www.instagram.com${tokens[1]}`;\n    }\n\n    return proofUrl;\n  }\n\n  static shouldValidateIdentityInBody() {\n    return true;\n  }\n\n  static getProofIdentity(searchText) {\n    const $ = cheerio.load(searchText);\n    const username = $('meta[property=\"og:description\"]').attr('content');\n\n    if (username !== undefined && username.split(':').length > 1) {\n      return username.split(':')[0].match(/(@\\w+)/)[0].substr(1);\n    } else {\n      return '';\n    }\n  }\n\n  static getProofStatement(searchText) {\n    const $ = cheerio.load(searchText);\n    const statement = $('meta[property=\"og:description\"]').attr('content');\n\n    if (statement !== undefined && statement.split(':').length > 1) {\n      return statement.split(':')[1].trim().replace('“', '').replace('”', '');\n    } else {\n      return '';\n    }\n  }\n\n}\n\nexports.Instagram = Instagram;","map":{"version":3,"sources":["../../../src/profiles/services/instagram.ts"],"names":[],"mappings":";;;;;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,MAAM,SAAN,SAAwB,SAAA,CAAA,OAAxB,CAA+B;AAC7B,SAAO,WAAP,GAAkB;AAChB,UAAM,QAAQ,GAAG,CAAC,4BAAD,EAA+B,wBAA/B,CAAjB;AACA,WAAO,QAAP;AACD;;AAED,SAAO,WAAP,CAAmB,KAAnB,EAA6B;AAC3B,UAAM,QAAQ,GAAG,KAAK,WAAL,EAAjB;AACA,UAAM,kBAAkB,GAAG,KAAK,YAAL,CAAkB,KAAlB,CAA3B;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,UAAI,kBAAkB,CAAC,UAAnB,CAA8B,GAAG,QAAQ,CAAC,CAAD,CAAG,EAA5C,CAAJ,EAAqD;AACnD,eAAO,kBAAP;AACD;AACF;;AACD,UAAM,IAAI,KAAJ,CAAU,aAAa,KAAK,CAAC,SAAS,6BAA6B,KAAK,CAAC,OAAO,EAAhF,CAAN;AACD;;AAED,SAAO,YAAP,CAAoB,KAApB,EAA8B;AAC5B,QAAI,QAAQ,GAAG,KAAK,CAAC,SAArB;AACA,IAAA,QAAQ,GAAG,MAAM,YAAN,CAAmB,QAAnB,CAAX;;AAEA,QAAI,QAAQ,CAAC,UAAT,CAAoB,uBAApB,CAAJ,EAAkD;AAChD,YAAM,MAAM,GAAG,QAAQ,CAAC,KAAT,CAAe,uBAAf,CAAf;AACA,MAAA,QAAQ,GAAG,4BAA4B,MAAM,CAAC,CAAD,CAAG,EAAhD;AACD;;AACD,WAAO,QAAP;AACD;;AAED,SAAO,4BAAP,GAAmC;AACjC,WAAO,IAAP;AACD;;AAED,SAAO,gBAAP,CAAwB,UAAxB,EAA0C;AACxC,UAAM,CAAC,GAAG,OAAO,CAAC,IAAR,CAAa,UAAb,CAAV;AACA,UAAM,QAAQ,GAAG,CAAC,CAAC,iCAAD,CAAD,CAAqC,IAArC,CAA0C,SAA1C,CAAjB;;AACA,QAAI,QAAQ,KAAK,SAAb,IAA0B,QAAQ,CAAC,KAAT,CAAe,GAAf,EAAoB,MAApB,GAA6B,CAA3D,EAA8D;AAC5D,aAAO,QAAQ,CAAC,KAAT,CAAe,GAAf,EAAoB,CAApB,EAAuB,KAAvB,CAA6B,QAA7B,EAAuC,CAAvC,EAA0C,MAA1C,CAAiD,CAAjD,CAAP;AACD,KAFD,MAEO;AACL,aAAO,EAAP;AACD;AACF;;AAED,SAAO,iBAAP,CAAyB,UAAzB,EAA2C;AACzC,UAAM,CAAC,GAAG,OAAO,CAAC,IAAR,CAAa,UAAb,CAAV;AACA,UAAM,SAAS,GAAG,CAAC,CAAC,iCAAD,CAAD,CACf,IADe,CACV,SADU,CAAlB;;AAGA,QAAI,SAAS,KAAK,SAAd,IAA2B,SAAS,CAAC,KAAV,CAAgB,GAAhB,EAAqB,MAArB,GAA8B,CAA7D,EAAgE;AAC9D,aAAO,SAAS,CAAC,KAAV,CAAgB,GAAhB,EAAqB,CAArB,EAAwB,IAAxB,GAA+B,OAA/B,CAAuC,GAAvC,EAA4C,EAA5C,EAAgD,OAAhD,CAAwD,GAAxD,EAA6D,EAA7D,CAAP;AACD,KAFD,MAEO;AACL,aAAO,EAAP;AACD;AACF;;AArD4B;;AAwDtB,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cheerio = require(\"cheerio\");\nconst service_1 = require(\"./service\");\nclass Instagram extends service_1.Service {\n    static getBaseUrls() {\n        const baseUrls = ['https://www.instagram.com/', 'https://instagram.com/'];\n        return baseUrls;\n    }\n    static getProofUrl(proof) {\n        const baseUrls = this.getBaseUrls();\n        const normalizedProofUrl = this.normalizeUrl(proof);\n        for (let i = 0; i < baseUrls.length; i++) {\n            if (normalizedProofUrl.startsWith(`${baseUrls[i]}`)) {\n                return normalizedProofUrl;\n            }\n        }\n        throw new Error(`Proof url ${proof.proof_url} is not valid for service ${proof.service}`);\n    }\n    static normalizeUrl(proof) {\n        let proofUrl = proof.proof_url;\n        proofUrl = super.prefixScheme(proofUrl);\n        if (proofUrl.startsWith('https://instagram.com')) {\n            const tokens = proofUrl.split('https://instagram.com');\n            proofUrl = `https://www.instagram.com${tokens[1]}`;\n        }\n        return proofUrl;\n    }\n    static shouldValidateIdentityInBody() {\n        return true;\n    }\n    static getProofIdentity(searchText) {\n        const $ = cheerio.load(searchText);\n        const username = $('meta[property=\"og:description\"]').attr('content');\n        if (username !== undefined && username.split(':').length > 1) {\n            return username.split(':')[0].match(/(@\\w+)/)[0].substr(1);\n        }\n        else {\n            return '';\n        }\n    }\n    static getProofStatement(searchText) {\n        const $ = cheerio.load(searchText);\n        const statement = $('meta[property=\"og:description\"]')\n            .attr('content');\n        if (statement !== undefined && statement.split(':').length > 1) {\n            return statement.split(':')[1].trim().replace('“', '').replace('”', '');\n        }\n        else {\n            return '';\n        }\n    }\n}\nexports.Instagram = Instagram;\n//# sourceMappingURL=instagram.js.map"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst authConstants_1 = require(\"./authConstants\");\n\nconst utils_1 = require(\"../utils\");\n/**\n * Configuration data for the current app.\n *\n * On browser platforms, creating an instance of this\n * class without any arguments will use\n * `window.location.origin` as the app domain.\n * On non-browser platforms, you need to\n * specify an app domain as the second argument.\n *\n */\n\n\nclass AppConfig {\n  /**\n   * @param {Array<string>} scopes - permissions this app is requesting\n   * @param {string} appDomain - the app domain\n   * @param {string} redirectPath - path on app domain to redirect users to after authentication\n   * @param {string} manifestPath - path relative to app domain of app's manifest file\n   * @param {string} coreNode - override the default or user selected core node\n   * @param {string} authenticatorURL - the web-based fall back authenticator\n   * ([[DEFAULT_BLOCKSTACK_HOST]])\n   */\n  constructor(scopes = authConstants_1.DEFAULT_SCOPE.slice(), appDomain = utils_1.getGlobalObject('location', {\n    returnEmptyObject: true\n  }).origin, redirectPath = '', manifestPath = '/manifest.json', coreNode = null, authenticatorURL = authConstants_1.DEFAULT_BLOCKSTACK_HOST) {\n    this.appDomain = appDomain;\n    this.scopes = scopes;\n    this.redirectPath = redirectPath;\n    this.manifestPath = manifestPath;\n\n    if (!coreNode) {\n      this.coreNode = authConstants_1.DEFAULT_CORE_NODE;\n    } else {\n      this.coreNode = coreNode;\n    }\n\n    this.authenticatorURL = authenticatorURL;\n  }\n  /**\n   * The location to which the authenticator should\n   * redirect the user.\n   * @returns {string} - URI\n   */\n\n\n  redirectURI() {\n    return `${this.appDomain}${this.redirectPath}`;\n  }\n  /**\n   * The location of the app's manifest file.\n   * @returns {string} - URI\n   */\n\n\n  manifestURI() {\n    return `${this.appDomain}${this.manifestPath}`;\n  }\n\n}\n\nexports.AppConfig = AppConfig;","map":{"version":3,"sources":["../../src/auth/appConfig.ts"],"names":[],"mappings":";;;;;;AACA,MAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAEA;;;;;;;;;;;;AAUA,MAAa,SAAb,CAAsB;AA8CpB;;;;;;;;;AASA,EAAA,WAAA,CAAY,MAAA,GAAwB,eAAA,CAAA,aAAA,CAAc,KAAd,EAApC,EACY,SAAA,GAAoB,OAAA,CAAA,eAAA,CAAgB,UAAhB,EAA4B;AAAE,IAAA,iBAAiB,EAAE;AAArB,GAA5B,EAAyD,MADzF,EAEY,YAAA,GAAuB,EAFnC,EAGY,YAAA,GAAuB,gBAHnC,EAIY,QAAA,GAA0B,IAJtC,EAKY,gBAAA,GAA2B,eAAA,CAAA,uBALvC,EAK8D;AAC5D,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,YAAL,GAAoB,YAApB;AACA,SAAK,YAAL,GAAoB,YAApB;;AAEA,QAAI,CAAC,QAAL,EAAe;AACb,WAAK,QAAL,GAAgB,eAAA,CAAA,iBAAhB;AACD,KAFD,MAEO;AACL,WAAK,QAAL,GAAgB,QAAhB;AACD;;AAED,SAAK,gBAAL,GAAwB,gBAAxB;AACD;AAED;;;;;;;AAKA,EAAA,WAAW,GAAA;AACT,WAAO,GAAG,KAAK,SAAS,GAAG,KAAK,YAAY,EAA5C;AACD;AAED;;;;;;AAIA,EAAA,WAAW,GAAA;AACT,WAAO,GAAG,KAAK,SAAS,GAAG,KAAK,YAAY,EAA5C;AACD;;AA1FmB;;AAAtB,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst authConstants_1 = require(\"./authConstants\");\nconst utils_1 = require(\"../utils\");\n/**\n * Configuration data for the current app.\n *\n * On browser platforms, creating an instance of this\n * class without any arguments will use\n * `window.location.origin` as the app domain.\n * On non-browser platforms, you need to\n * specify an app domain as the second argument.\n *\n */\nclass AppConfig {\n    /**\n     * @param {Array<string>} scopes - permissions this app is requesting\n     * @param {string} appDomain - the app domain\n     * @param {string} redirectPath - path on app domain to redirect users to after authentication\n     * @param {string} manifestPath - path relative to app domain of app's manifest file\n     * @param {string} coreNode - override the default or user selected core node\n     * @param {string} authenticatorURL - the web-based fall back authenticator\n     * ([[DEFAULT_BLOCKSTACK_HOST]])\n     */\n    constructor(scopes = authConstants_1.DEFAULT_SCOPE.slice(), appDomain = utils_1.getGlobalObject('location', { returnEmptyObject: true }).origin, redirectPath = '', manifestPath = '/manifest.json', coreNode = null, authenticatorURL = authConstants_1.DEFAULT_BLOCKSTACK_HOST) {\n        this.appDomain = appDomain;\n        this.scopes = scopes;\n        this.redirectPath = redirectPath;\n        this.manifestPath = manifestPath;\n        if (!coreNode) {\n            this.coreNode = authConstants_1.DEFAULT_CORE_NODE;\n        }\n        else {\n            this.coreNode = coreNode;\n        }\n        this.authenticatorURL = authenticatorURL;\n    }\n    /**\n     * The location to which the authenticator should\n     * redirect the user.\n     * @returns {string} - URI\n     */\n    redirectURI() {\n        return `${this.appDomain}${this.redirectPath}`;\n    }\n    /**\n     * The location of the app's manifest file.\n     * @returns {string} - URI\n     */\n    manifestURI() {\n        return `${this.appDomain}${this.manifestPath}`;\n    }\n}\nexports.AppConfig = AppConfig;\n//# sourceMappingURL=appConfig.js.map"]},"metadata":{},"sourceType":"script"}
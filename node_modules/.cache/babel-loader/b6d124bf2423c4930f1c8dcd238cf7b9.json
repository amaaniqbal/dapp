{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst errors_1 = require(\"./errors\");\n/**\n* @ignore\n*/\n\n\nfunction makeDIDFromAddress(address) {\n  return `did:btc-addr:${address}`;\n}\n\nexports.makeDIDFromAddress = makeDIDFromAddress;\n/**\n* @ignore\n*/\n\nfunction makeDIDFromPublicKey(publicKey) {\n  return `did:ecdsa-pub:${publicKey}`;\n}\n\nexports.makeDIDFromPublicKey = makeDIDFromPublicKey;\n/**\n* @ignore\n*/\n\nfunction getDIDType(decentralizedID) {\n  const didParts = decentralizedID.split(':');\n\n  if (didParts.length !== 3) {\n    throw new errors_1.InvalidDIDError('Decentralized IDs must have 3 parts');\n  }\n\n  if (didParts[0].toLowerCase() !== 'did') {\n    throw new errors_1.InvalidDIDError('Decentralized IDs must start with \"did\"');\n  }\n\n  return didParts[1].toLowerCase();\n}\n\nexports.getDIDType = getDIDType;\n/**\n* @ignore\n*/\n\nfunction getAddressFromDID(decentralizedID) {\n  const didType = getDIDType(decentralizedID);\n\n  if (didType === 'btc-addr') {\n    return decentralizedID.split(':')[2];\n  } else {\n    return null;\n  }\n}\n\nexports.getAddressFromDID = getAddressFromDID;\n/*\nexport function getPublicKeyOrAddressFromDID(decentralizedID) {\n  const didParts = decentralizedID.split(':')\n\n  if (didParts.length !== 3) {\n    throw new InvalidDIDError('Decentralized IDs must have 3 parts')\n  }\n\n  if (didParts[0].toLowerCase() !== 'did') {\n    throw new InvalidDIDError('Decentralized IDs must start with \"did\"')\n  }\n\n  if (didParts[1].toLowerCase() === 'ecdsa-pub') {\n    return didParts[2]\n  } else if (didParts[1].toLowerCase() === 'btc-addr') {\n    return didParts[2]\n  } else {\n    throw new InvalidDIDError('Decentralized ID format not supported')\n  }\n}\n*/","map":{"version":3,"sources":["../src/dids.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAEA;;;;;AAGA,SAAgB,kBAAhB,CAAmC,OAAnC,EAAkD;AAChD,SAAO,gBAAgB,OAAO,EAA9B;AACD;;AAFD,OAAA,CAAA,kBAAA,GAAA,kBAAA;AAIA;;;;AAGA,SAAgB,oBAAhB,CAAqC,SAArC,EAAsD;AACpD,SAAO,iBAAiB,SAAS,EAAjC;AACD;;AAFD,OAAA,CAAA,oBAAA,GAAA,oBAAA;AAIA;;;;AAGA,SAAgB,UAAhB,CAA2B,eAA3B,EAAkD;AAChD,QAAM,QAAQ,GAAG,eAAe,CAAC,KAAhB,CAAsB,GAAtB,CAAjB;;AAEA,MAAI,QAAQ,CAAC,MAAT,KAAoB,CAAxB,EAA2B;AACzB,UAAM,IAAI,QAAA,CAAA,eAAJ,CAAoB,qCAApB,CAAN;AACD;;AAED,MAAI,QAAQ,CAAC,CAAD,CAAR,CAAY,WAAZ,OAA8B,KAAlC,EAAyC;AACvC,UAAM,IAAI,QAAA,CAAA,eAAJ,CAAoB,yCAApB,CAAN;AACD;;AAED,SAAO,QAAQ,CAAC,CAAD,CAAR,CAAY,WAAZ,EAAP;AACD;;AAZD,OAAA,CAAA,UAAA,GAAA,UAAA;AAcA;;;;AAGA,SAAgB,iBAAhB,CAAkC,eAAlC,EAAyD;AACvD,QAAM,OAAO,GAAG,UAAU,CAAC,eAAD,CAA1B;;AAEA,MAAI,OAAO,KAAK,UAAhB,EAA4B;AAC1B,WAAO,eAAe,CAAC,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAP;AACD;AACF;;AARD,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAUA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst errors_1 = require(\"./errors\");\n/**\n* @ignore\n*/\nfunction makeDIDFromAddress(address) {\n    return `did:btc-addr:${address}`;\n}\nexports.makeDIDFromAddress = makeDIDFromAddress;\n/**\n* @ignore\n*/\nfunction makeDIDFromPublicKey(publicKey) {\n    return `did:ecdsa-pub:${publicKey}`;\n}\nexports.makeDIDFromPublicKey = makeDIDFromPublicKey;\n/**\n* @ignore\n*/\nfunction getDIDType(decentralizedID) {\n    const didParts = decentralizedID.split(':');\n    if (didParts.length !== 3) {\n        throw new errors_1.InvalidDIDError('Decentralized IDs must have 3 parts');\n    }\n    if (didParts[0].toLowerCase() !== 'did') {\n        throw new errors_1.InvalidDIDError('Decentralized IDs must start with \"did\"');\n    }\n    return didParts[1].toLowerCase();\n}\nexports.getDIDType = getDIDType;\n/**\n* @ignore\n*/\nfunction getAddressFromDID(decentralizedID) {\n    const didType = getDIDType(decentralizedID);\n    if (didType === 'btc-addr') {\n        return decentralizedID.split(':')[2];\n    }\n    else {\n        return null;\n    }\n}\nexports.getAddressFromDID = getAddressFromDID;\n/*\nexport function getPublicKeyOrAddressFromDID(decentralizedID) {\n  const didParts = decentralizedID.split(':')\n\n  if (didParts.length !== 3) {\n    throw new InvalidDIDError('Decentralized IDs must have 3 parts')\n  }\n\n  if (didParts[0].toLowerCase() !== 'did') {\n    throw new InvalidDIDError('Decentralized IDs must start with \"did\"')\n  }\n\n  if (didParts[1].toLowerCase() === 'ecdsa-pub') {\n    return didParts[2]\n  } else if (didParts[1].toLowerCase() === 'btc-addr') {\n    return didParts[2]\n  } else {\n    throw new InvalidDIDError('Decentralized ID format not supported')\n  }\n}\n*/\n//# sourceMappingURL=dids.js.map"]},"metadata":{},"sourceType":"script"}